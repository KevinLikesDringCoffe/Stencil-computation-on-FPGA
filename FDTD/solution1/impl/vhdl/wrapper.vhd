-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity wrapper is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of wrapper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "wrapper,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=4684504,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=60,HLS_SYN_FF=13101,HLS_SYN_LUT=15872,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal initial_array : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_n : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_s : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_w : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_e : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_tij : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_ti : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_tj : STD_LOGIC_VECTOR (31 downto 0);
    signal iter : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln33_reg_1235 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln33_reg_1235_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln78_reg_1382 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal icmp_ln78_reg_1382_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp5_iter7 : STD_LOGIC := '0';
    signal icmp_ln78_reg_1382_pp5_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_500 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_0_reg_511 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_522 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_0_reg_533 : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_0_reg_544 : STD_LOGIC_VECTOR (6 downto 0);
    signal i3_0_reg_555 : STD_LOGIC_VECTOR (6 downto 0);
    signal i4_0_reg_566 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten6_reg_577 : STD_LOGIC_VECTOR (12 downto 0);
    signal i5_0_reg_588 : STD_LOGIC_VECTOR (6 downto 0);
    signal j6_0_reg_599 : STD_LOGIC_VECTOR (6 downto 0);
    signal iter_read_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_tj_read_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_ti_read_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_tij_read_reg_1200 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_reg_1223 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_720_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast_reg_1229 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln33_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln33_reg_1235_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1235_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1235_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1235_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1235_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1235_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_730_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln38_1_fu_756_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln38_1_reg_1244 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_fu_776_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_reg_1249_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_1_fu_816_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln38_1_reg_1253 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln38_1_fu_821_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_reg_1258_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_2_fu_839_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_2_reg_1262_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_845_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_addr_4_read_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_fu_874_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal trunc_ln45_fu_880_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_reg_1295 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_reg_1295_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_1299 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_reg_1299_pp1_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_3_read_reg_1304 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state29_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_3_fu_905_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal trunc_ln51_fu_911_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln51_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln51_reg_1319_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1_reg_1323 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln1_reg_1323_pp2_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_2_read_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln54_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state39_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state41_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i_4_fu_936_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal trunc_ln57_fu_942_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln57_reg_1343 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln57_reg_1343_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln2_reg_1347 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln2_reg_1347_pp3_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_1_read_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln60_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state49_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state50_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state51_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal i_7_fu_967_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal trunc_ln63_fu_973_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln63_reg_1367 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln63_reg_1367_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln3_reg_1371 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln3_reg_1371_pp4_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_read_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln78_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state54_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state55_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state55_io : BOOLEAN;
    signal ap_block_state56_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state56_io : BOOLEAN;
    signal ap_block_state57_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state58_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_state59_pp5_stage0_iter5 : BOOLEAN;
    signal ap_block_state60_pp5_stage0_iter6 : BOOLEAN;
    signal ap_block_state61_pp5_stage0_iter7 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln78_reg_1382_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1382_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1382_pp5_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1382_pp5_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln78_fu_998_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal select_ln83_4_fu_1024_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln83_4_reg_1391 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln83_fu_1044_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln83_reg_1396 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_1_fu_1084_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln83_1_reg_1403 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln83_1_fu_1089_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln83_1_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_1121_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln83_2_fu_1177_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln83_2_reg_1446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state29 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state39 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state49 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_Kernel64x64_fu_610_ap_ready : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_ap_done : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state54 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter6 : STD_LOGIC := '0';
    signal array_buffer_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal array_buffer_0_0_ce0 : STD_LOGIC;
    signal array_buffer_0_0_we0 : STD_LOGIC;
    signal array_buffer_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_0_0_ce1 : STD_LOGIC;
    signal array_buffer_0_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_0_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal array_buffer_0_1_ce0 : STD_LOGIC;
    signal array_buffer_0_1_we0 : STD_LOGIC;
    signal array_buffer_0_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_0_1_ce1 : STD_LOGIC;
    signal array_buffer_0_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_1_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal array_buffer_1_0_ce0 : STD_LOGIC;
    signal array_buffer_1_0_we0 : STD_LOGIC;
    signal array_buffer_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_1_0_ce1 : STD_LOGIC;
    signal array_buffer_1_0_we1 : STD_LOGIC;
    signal array_buffer_1_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_1_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal array_buffer_1_1_ce0 : STD_LOGIC;
    signal array_buffer_1_1_we0 : STD_LOGIC;
    signal array_buffer_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_buffer_1_1_ce1 : STD_LOGIC;
    signal array_buffer_1_1_we1 : STD_LOGIC;
    signal array_buffer_1_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_n_buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bondary_n_buffer_0_ce0 : STD_LOGIC;
    signal bondary_n_buffer_0_we0 : STD_LOGIC;
    signal bondary_n_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_n_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bondary_n_buffer_1_ce0 : STD_LOGIC;
    signal bondary_n_buffer_1_we0 : STD_LOGIC;
    signal bondary_n_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_s_buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bondary_s_buffer_0_ce0 : STD_LOGIC;
    signal bondary_s_buffer_0_we0 : STD_LOGIC;
    signal bondary_s_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_s_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bondary_s_buffer_1_ce0 : STD_LOGIC;
    signal bondary_s_buffer_1_we0 : STD_LOGIC;
    signal bondary_s_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_w_buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bondary_w_buffer_0_ce0 : STD_LOGIC;
    signal bondary_w_buffer_0_we0 : STD_LOGIC;
    signal bondary_w_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_w_buffer_0_ce1 : STD_LOGIC;
    signal bondary_w_buffer_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_w_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bondary_w_buffer_1_ce0 : STD_LOGIC;
    signal bondary_w_buffer_1_we0 : STD_LOGIC;
    signal bondary_w_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_w_buffer_1_ce1 : STD_LOGIC;
    signal bondary_w_buffer_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_e_buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bondary_e_buffer_0_ce0 : STD_LOGIC;
    signal bondary_e_buffer_0_we0 : STD_LOGIC;
    signal bondary_e_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_e_buffer_0_ce1 : STD_LOGIC;
    signal bondary_e_buffer_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_e_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bondary_e_buffer_1_ce0 : STD_LOGIC;
    signal bondary_e_buffer_1_we0 : STD_LOGIC;
    signal bondary_e_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bondary_e_buffer_1_ce1 : STD_LOGIC;
    signal bondary_e_buffer_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Kernel64x64_fu_610_ap_start : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_ap_idle : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_0_0_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_0_0_we0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_0_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_0_0_ce1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_0_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_0_1_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_0_1_we0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_0_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_0_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_0_1_ce1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_1_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_1_0_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_1_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_1_0_ce1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_1_0_we1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_1_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_1_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_1_1_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_1_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Kernel64x64_fu_610_array_buffer_1_1_ce1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_1_1_we1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_array_buffer_1_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_n_buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_n_buffer_0_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_n_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_n_buffer_1_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_s_buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_s_buffer_0_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_s_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_s_buffer_1_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_w_buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_w_buffer_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_w_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_w_buffer_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_e_buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_e_buffer_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce1 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_e_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce0 : STD_LOGIC;
    signal grp_Kernel64x64_fu_610_bondary_e_buffer_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce1 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_515_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_i5_0_phi_fu_592_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Kernel64x64_fu_610_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal zext_ln38_5_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_6_fu_1113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_9_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_10_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_11_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_3_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_4_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0_01001 : BOOLEAN;
    signal bondary_e9_fu_630_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal bondary_w7_fu_650_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal bondary_s5_fu_670_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal bondary_n3_fu_690_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_10_fu_710_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln35_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_736_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_764_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln38_2_mid2_v_fu_780_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_790_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln38_fu_748_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_fu_772_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln38_1_fu_802_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln38_fu_806_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln38_2_fu_812_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_fu_825_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln36_fu_798_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln38_4_fu_835_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln80_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_1004_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_1032_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln83_2_mid2_v_fu_1048_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_1058_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln83_3_fu_1016_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln83_fu_1040_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln83_2_fu_1070_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln83_fu_1074_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln83_3_fu_1080_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_1093_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_1_fu_1066_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_5_fu_1103_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln83_2_fu_1107_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln83_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln83_1_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_1_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_1147_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln83_2_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_1_fu_1165_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;

    component Kernel64x64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_buffer_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_buffer_0_0_ce0 : OUT STD_LOGIC;
        array_buffer_0_0_we0 : OUT STD_LOGIC;
        array_buffer_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_0_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_buffer_0_0_ce1 : OUT STD_LOGIC;
        array_buffer_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_buffer_0_1_ce0 : OUT STD_LOGIC;
        array_buffer_0_1_we0 : OUT STD_LOGIC;
        array_buffer_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_0_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_buffer_0_1_ce1 : OUT STD_LOGIC;
        array_buffer_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_1_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_buffer_1_0_ce0 : OUT STD_LOGIC;
        array_buffer_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_1_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_buffer_1_0_ce1 : OUT STD_LOGIC;
        array_buffer_1_0_we1 : OUT STD_LOGIC;
        array_buffer_1_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_1_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_buffer_1_1_ce0 : OUT STD_LOGIC;
        array_buffer_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_1_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_buffer_1_1_ce1 : OUT STD_LOGIC;
        array_buffer_1_1_we1 : OUT STD_LOGIC;
        array_buffer_1_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        array_buffer_1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_n_buffer_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_n_buffer_0_ce0 : OUT STD_LOGIC;
        bondary_n_buffer_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_n_buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_n_buffer_1_ce0 : OUT STD_LOGIC;
        bondary_n_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_s_buffer_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_s_buffer_0_ce0 : OUT STD_LOGIC;
        bondary_s_buffer_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_s_buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_s_buffer_1_ce0 : OUT STD_LOGIC;
        bondary_s_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_w_buffer_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_w_buffer_0_ce0 : OUT STD_LOGIC;
        bondary_w_buffer_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_w_buffer_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_w_buffer_0_ce1 : OUT STD_LOGIC;
        bondary_w_buffer_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_w_buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_w_buffer_1_ce0 : OUT STD_LOGIC;
        bondary_w_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_w_buffer_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_w_buffer_1_ce1 : OUT STD_LOGIC;
        bondary_w_buffer_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_e_buffer_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_e_buffer_0_ce0 : OUT STD_LOGIC;
        bondary_e_buffer_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_e_buffer_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_e_buffer_0_ce1 : OUT STD_LOGIC;
        bondary_e_buffer_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_e_buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_e_buffer_1_ce0 : OUT STD_LOGIC;
        bondary_e_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bondary_e_buffer_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bondary_e_buffer_1_ce1 : OUT STD_LOGIC;
        bondary_e_buffer_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        coef_tij : IN STD_LOGIC_VECTOR (31 downto 0);
        coef_ti : IN STD_LOGIC_VECTOR (31 downto 0);
        coef_tj : IN STD_LOGIC_VECTOR (31 downto 0);
        iter : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component wrapper_array_bufhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component wrapper_array_bufjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component wrapper_bondary_nlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component wrapper_bondary_wpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component wrapper_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        initial_array : OUT STD_LOGIC_VECTOR (31 downto 0);
        bondary_n : OUT STD_LOGIC_VECTOR (31 downto 0);
        bondary_s : OUT STD_LOGIC_VECTOR (31 downto 0);
        bondary_w : OUT STD_LOGIC_VECTOR (31 downto 0);
        bondary_e : OUT STD_LOGIC_VECTOR (31 downto 0);
        coef_tij : OUT STD_LOGIC_VECTOR (31 downto 0);
        coef_ti : OUT STD_LOGIC_VECTOR (31 downto 0);
        coef_tj : OUT STD_LOGIC_VECTOR (31 downto 0);
        iter : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component wrapper_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    wrapper_AXILiteS_s_axi_U : component wrapper_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        initial_array => initial_array,
        bondary_n => bondary_n,
        bondary_s => bondary_s,
        bondary_w => bondary_w,
        bondary_e => bondary_e,
        coef_tij => coef_tij,
        coef_ti => coef_ti,
        coef_tj => coef_tj,
        iter => iter);

    wrapper_gmem_m_axi_U : component wrapper_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => select_ln83_2_reg_1446,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    array_buffer_0_0_U : component wrapper_array_bufhbi
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => array_buffer_0_0_address0,
        ce0 => array_buffer_0_0_ce0,
        we0 => array_buffer_0_0_we0,
        d0 => array_buffer_0_0_d0,
        q0 => array_buffer_0_0_q0,
        address1 => grp_Kernel64x64_fu_610_array_buffer_0_0_address1,
        ce1 => array_buffer_0_0_ce1,
        q1 => array_buffer_0_0_q1);

    array_buffer_0_1_U : component wrapper_array_bufhbi
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => array_buffer_0_1_address0,
        ce0 => array_buffer_0_1_ce0,
        we0 => array_buffer_0_1_we0,
        d0 => array_buffer_0_1_d0,
        q0 => array_buffer_0_1_q0,
        address1 => grp_Kernel64x64_fu_610_array_buffer_0_1_address1,
        ce1 => array_buffer_0_1_ce1,
        q1 => array_buffer_0_1_q1);

    array_buffer_1_0_U : component wrapper_array_bufjbC
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => array_buffer_1_0_address0,
        ce0 => array_buffer_1_0_ce0,
        we0 => array_buffer_1_0_we0,
        d0 => gmem_addr_4_read_reg_1278,
        q0 => array_buffer_1_0_q0,
        address1 => grp_Kernel64x64_fu_610_array_buffer_1_0_address1,
        ce1 => array_buffer_1_0_ce1,
        we1 => array_buffer_1_0_we1,
        d1 => grp_Kernel64x64_fu_610_array_buffer_1_0_d1,
        q1 => array_buffer_1_0_q1);

    array_buffer_1_1_U : component wrapper_array_bufjbC
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => array_buffer_1_1_address0,
        ce0 => array_buffer_1_1_ce0,
        we0 => array_buffer_1_1_we0,
        d0 => gmem_addr_4_read_reg_1278,
        q0 => array_buffer_1_1_q0,
        address1 => grp_Kernel64x64_fu_610_array_buffer_1_1_address1,
        ce1 => array_buffer_1_1_ce1,
        we1 => array_buffer_1_1_we1,
        d1 => grp_Kernel64x64_fu_610_array_buffer_1_1_d1,
        q1 => array_buffer_1_1_q1);

    bondary_n_buffer_0_U : component wrapper_bondary_nlbW
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bondary_n_buffer_0_address0,
        ce0 => bondary_n_buffer_0_ce0,
        we0 => bondary_n_buffer_0_we0,
        d0 => gmem_addr_3_read_reg_1304,
        q0 => bondary_n_buffer_0_q0);

    bondary_n_buffer_1_U : component wrapper_bondary_nlbW
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bondary_n_buffer_1_address0,
        ce0 => bondary_n_buffer_1_ce0,
        we0 => bondary_n_buffer_1_we0,
        d0 => gmem_addr_3_read_reg_1304,
        q0 => bondary_n_buffer_1_q0);

    bondary_s_buffer_0_U : component wrapper_bondary_nlbW
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bondary_s_buffer_0_address0,
        ce0 => bondary_s_buffer_0_ce0,
        we0 => bondary_s_buffer_0_we0,
        d0 => gmem_addr_2_read_reg_1328,
        q0 => bondary_s_buffer_0_q0);

    bondary_s_buffer_1_U : component wrapper_bondary_nlbW
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bondary_s_buffer_1_address0,
        ce0 => bondary_s_buffer_1_ce0,
        we0 => bondary_s_buffer_1_we0,
        d0 => gmem_addr_2_read_reg_1328,
        q0 => bondary_s_buffer_1_q0);

    bondary_w_buffer_0_U : component wrapper_bondary_wpcA
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bondary_w_buffer_0_address0,
        ce0 => bondary_w_buffer_0_ce0,
        we0 => bondary_w_buffer_0_we0,
        d0 => gmem_addr_1_read_reg_1352,
        q0 => bondary_w_buffer_0_q0,
        address1 => grp_Kernel64x64_fu_610_bondary_w_buffer_0_address1,
        ce1 => bondary_w_buffer_0_ce1,
        q1 => bondary_w_buffer_0_q1);

    bondary_w_buffer_1_U : component wrapper_bondary_wpcA
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bondary_w_buffer_1_address0,
        ce0 => bondary_w_buffer_1_ce0,
        we0 => bondary_w_buffer_1_we0,
        d0 => gmem_addr_1_read_reg_1352,
        q0 => bondary_w_buffer_1_q0,
        address1 => grp_Kernel64x64_fu_610_bondary_w_buffer_1_address1,
        ce1 => bondary_w_buffer_1_ce1,
        q1 => bondary_w_buffer_1_q1);

    bondary_e_buffer_0_U : component wrapper_bondary_wpcA
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bondary_e_buffer_0_address0,
        ce0 => bondary_e_buffer_0_ce0,
        we0 => bondary_e_buffer_0_we0,
        d0 => gmem_addr_read_reg_1376,
        q0 => bondary_e_buffer_0_q0,
        address1 => grp_Kernel64x64_fu_610_bondary_e_buffer_0_address1,
        ce1 => bondary_e_buffer_0_ce1,
        q1 => bondary_e_buffer_0_q1);

    bondary_e_buffer_1_U : component wrapper_bondary_wpcA
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bondary_e_buffer_1_address0,
        ce0 => bondary_e_buffer_1_ce0,
        we0 => bondary_e_buffer_1_we0,
        d0 => gmem_addr_read_reg_1376,
        q0 => bondary_e_buffer_1_q0,
        address1 => grp_Kernel64x64_fu_610_bondary_e_buffer_1_address1,
        ce1 => bondary_e_buffer_1_ce1,
        q1 => bondary_e_buffer_1_q1);

    grp_Kernel64x64_fu_610 : component Kernel64x64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Kernel64x64_fu_610_ap_start,
        ap_done => grp_Kernel64x64_fu_610_ap_done,
        ap_idle => grp_Kernel64x64_fu_610_ap_idle,
        ap_ready => grp_Kernel64x64_fu_610_ap_ready,
        array_buffer_0_0_address0 => grp_Kernel64x64_fu_610_array_buffer_0_0_address0,
        array_buffer_0_0_ce0 => grp_Kernel64x64_fu_610_array_buffer_0_0_ce0,
        array_buffer_0_0_we0 => grp_Kernel64x64_fu_610_array_buffer_0_0_we0,
        array_buffer_0_0_d0 => grp_Kernel64x64_fu_610_array_buffer_0_0_d0,
        array_buffer_0_0_q0 => array_buffer_0_0_q0,
        array_buffer_0_0_address1 => grp_Kernel64x64_fu_610_array_buffer_0_0_address1,
        array_buffer_0_0_ce1 => grp_Kernel64x64_fu_610_array_buffer_0_0_ce1,
        array_buffer_0_0_q1 => array_buffer_0_0_q1,
        array_buffer_0_1_address0 => grp_Kernel64x64_fu_610_array_buffer_0_1_address0,
        array_buffer_0_1_ce0 => grp_Kernel64x64_fu_610_array_buffer_0_1_ce0,
        array_buffer_0_1_we0 => grp_Kernel64x64_fu_610_array_buffer_0_1_we0,
        array_buffer_0_1_d0 => grp_Kernel64x64_fu_610_array_buffer_0_1_d0,
        array_buffer_0_1_q0 => array_buffer_0_1_q0,
        array_buffer_0_1_address1 => grp_Kernel64x64_fu_610_array_buffer_0_1_address1,
        array_buffer_0_1_ce1 => grp_Kernel64x64_fu_610_array_buffer_0_1_ce1,
        array_buffer_0_1_q1 => array_buffer_0_1_q1,
        array_buffer_1_0_address0 => grp_Kernel64x64_fu_610_array_buffer_1_0_address0,
        array_buffer_1_0_ce0 => grp_Kernel64x64_fu_610_array_buffer_1_0_ce0,
        array_buffer_1_0_q0 => array_buffer_1_0_q0,
        array_buffer_1_0_address1 => grp_Kernel64x64_fu_610_array_buffer_1_0_address1,
        array_buffer_1_0_ce1 => grp_Kernel64x64_fu_610_array_buffer_1_0_ce1,
        array_buffer_1_0_we1 => grp_Kernel64x64_fu_610_array_buffer_1_0_we1,
        array_buffer_1_0_d1 => grp_Kernel64x64_fu_610_array_buffer_1_0_d1,
        array_buffer_1_0_q1 => array_buffer_1_0_q1,
        array_buffer_1_1_address0 => grp_Kernel64x64_fu_610_array_buffer_1_1_address0,
        array_buffer_1_1_ce0 => grp_Kernel64x64_fu_610_array_buffer_1_1_ce0,
        array_buffer_1_1_q0 => array_buffer_1_1_q0,
        array_buffer_1_1_address1 => grp_Kernel64x64_fu_610_array_buffer_1_1_address1,
        array_buffer_1_1_ce1 => grp_Kernel64x64_fu_610_array_buffer_1_1_ce1,
        array_buffer_1_1_we1 => grp_Kernel64x64_fu_610_array_buffer_1_1_we1,
        array_buffer_1_1_d1 => grp_Kernel64x64_fu_610_array_buffer_1_1_d1,
        array_buffer_1_1_q1 => array_buffer_1_1_q1,
        bondary_n_buffer_0_address0 => grp_Kernel64x64_fu_610_bondary_n_buffer_0_address0,
        bondary_n_buffer_0_ce0 => grp_Kernel64x64_fu_610_bondary_n_buffer_0_ce0,
        bondary_n_buffer_0_q0 => bondary_n_buffer_0_q0,
        bondary_n_buffer_1_address0 => grp_Kernel64x64_fu_610_bondary_n_buffer_1_address0,
        bondary_n_buffer_1_ce0 => grp_Kernel64x64_fu_610_bondary_n_buffer_1_ce0,
        bondary_n_buffer_1_q0 => bondary_n_buffer_1_q0,
        bondary_s_buffer_0_address0 => grp_Kernel64x64_fu_610_bondary_s_buffer_0_address0,
        bondary_s_buffer_0_ce0 => grp_Kernel64x64_fu_610_bondary_s_buffer_0_ce0,
        bondary_s_buffer_0_q0 => bondary_s_buffer_0_q0,
        bondary_s_buffer_1_address0 => grp_Kernel64x64_fu_610_bondary_s_buffer_1_address0,
        bondary_s_buffer_1_ce0 => grp_Kernel64x64_fu_610_bondary_s_buffer_1_ce0,
        bondary_s_buffer_1_q0 => bondary_s_buffer_1_q0,
        bondary_w_buffer_0_address0 => grp_Kernel64x64_fu_610_bondary_w_buffer_0_address0,
        bondary_w_buffer_0_ce0 => grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce0,
        bondary_w_buffer_0_q0 => bondary_w_buffer_0_q0,
        bondary_w_buffer_0_address1 => grp_Kernel64x64_fu_610_bondary_w_buffer_0_address1,
        bondary_w_buffer_0_ce1 => grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce1,
        bondary_w_buffer_0_q1 => bondary_w_buffer_0_q1,
        bondary_w_buffer_1_address0 => grp_Kernel64x64_fu_610_bondary_w_buffer_1_address0,
        bondary_w_buffer_1_ce0 => grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce0,
        bondary_w_buffer_1_q0 => bondary_w_buffer_1_q0,
        bondary_w_buffer_1_address1 => grp_Kernel64x64_fu_610_bondary_w_buffer_1_address1,
        bondary_w_buffer_1_ce1 => grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce1,
        bondary_w_buffer_1_q1 => bondary_w_buffer_1_q1,
        bondary_e_buffer_0_address0 => grp_Kernel64x64_fu_610_bondary_e_buffer_0_address0,
        bondary_e_buffer_0_ce0 => grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce0,
        bondary_e_buffer_0_q0 => bondary_e_buffer_0_q0,
        bondary_e_buffer_0_address1 => grp_Kernel64x64_fu_610_bondary_e_buffer_0_address1,
        bondary_e_buffer_0_ce1 => grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce1,
        bondary_e_buffer_0_q1 => bondary_e_buffer_0_q1,
        bondary_e_buffer_1_address0 => grp_Kernel64x64_fu_610_bondary_e_buffer_1_address0,
        bondary_e_buffer_1_ce0 => grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce0,
        bondary_e_buffer_1_q0 => bondary_e_buffer_1_q0,
        bondary_e_buffer_1_address1 => grp_Kernel64x64_fu_610_bondary_e_buffer_1_address1,
        bondary_e_buffer_1_ce1 => grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce1,
        bondary_e_buffer_1_q1 => bondary_e_buffer_1_q1,
        coef_tij => coef_tij_read_reg_1200,
        coef_ti => coef_ti_read_reg_1195,
        coef_tj => coef_tj_read_reg_1190,
        iter => iter_read_reg_1185);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state29);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state39) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state39)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state39);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state49) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state49)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state49);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state54) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((grp_Kernel64x64_fu_610_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state54)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state54);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
                elsif (((grp_Kernel64x64_fu_610_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Kernel64x64_fu_610_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Kernel64x64_fu_610_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    grp_Kernel64x64_fu_610_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Kernel64x64_fu_610_ap_ready = ap_const_logic_1)) then 
                    grp_Kernel64x64_fu_610_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i1_0_reg_533 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln42_fu_868_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i1_0_reg_533 <= i_fu_874_p2;
            end if; 
        end if;
    end process;

    i2_0_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i2_0_reg_544 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln48_fu_899_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i2_0_reg_544 <= i_3_fu_905_p2;
            end if; 
        end if;
    end process;

    i3_0_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                i3_0_reg_555 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln54_fu_930_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i3_0_reg_555 <= i_4_fu_936_p2;
            end if; 
        end if;
    end process;

    i4_0_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                i4_0_reg_566 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln60_fu_961_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i4_0_reg_566 <= i_7_fu_967_p2;
            end if; 
        end if;
    end process;

    i5_0_reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_reg_1382 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i5_0_reg_588 <= select_ln83_4_reg_1391;
            elsif (((grp_Kernel64x64_fu_610_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i5_0_reg_588 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_reg_1235 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_511 <= select_ln38_1_reg_1244;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_511 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_577_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_fu_992_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                indvar_flatten6_reg_577 <= add_ln78_fu_998_p2;
            elsif (((grp_Kernel64x64_fu_610_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                indvar_flatten6_reg_577 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_fu_724_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_500 <= add_ln33_fu_730_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_500 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    j6_0_reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_fu_992_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                j6_0_reg_599 <= j_1_fu_1121_p2;
            elsif (((grp_Kernel64x64_fu_610_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                j6_0_reg_599 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_fu_724_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_522 <= j_fu_845_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_522 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_fu_724_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln38_1_reg_1253 <= add_ln38_1_fu_816_p2;
                add_ln38_2_reg_1262 <= add_ln38_2_fu_839_p2;
                trunc_ln38_1_reg_1258 <= trunc_ln38_1_fu_821_p1;
                trunc_ln38_reg_1249 <= trunc_ln38_fu_776_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln38_2_reg_1262_pp0_iter1_reg <= add_ln38_2_reg_1262;
                icmp_ln33_reg_1235 <= icmp_ln33_fu_724_p2;
                icmp_ln33_reg_1235_pp0_iter1_reg <= icmp_ln33_reg_1235;
                trunc_ln38_1_reg_1258_pp0_iter1_reg <= trunc_ln38_1_reg_1258;
                trunc_ln38_reg_1249_pp0_iter1_reg <= trunc_ln38_reg_1249;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln38_2_reg_1262_pp0_iter2_reg <= add_ln38_2_reg_1262_pp0_iter1_reg;
                add_ln38_2_reg_1262_pp0_iter3_reg <= add_ln38_2_reg_1262_pp0_iter2_reg;
                add_ln38_2_reg_1262_pp0_iter4_reg <= add_ln38_2_reg_1262_pp0_iter3_reg;
                add_ln38_2_reg_1262_pp0_iter5_reg <= add_ln38_2_reg_1262_pp0_iter4_reg;
                add_ln38_2_reg_1262_pp0_iter6_reg <= add_ln38_2_reg_1262_pp0_iter5_reg;
                add_ln38_2_reg_1262_pp0_iter7_reg <= add_ln38_2_reg_1262_pp0_iter6_reg;
                add_ln38_2_reg_1262_pp0_iter8_reg <= add_ln38_2_reg_1262_pp0_iter7_reg;
                icmp_ln33_reg_1235_pp0_iter2_reg <= icmp_ln33_reg_1235_pp0_iter1_reg;
                icmp_ln33_reg_1235_pp0_iter3_reg <= icmp_ln33_reg_1235_pp0_iter2_reg;
                icmp_ln33_reg_1235_pp0_iter4_reg <= icmp_ln33_reg_1235_pp0_iter3_reg;
                icmp_ln33_reg_1235_pp0_iter5_reg <= icmp_ln33_reg_1235_pp0_iter4_reg;
                icmp_ln33_reg_1235_pp0_iter6_reg <= icmp_ln33_reg_1235_pp0_iter5_reg;
                icmp_ln33_reg_1235_pp0_iter7_reg <= icmp_ln33_reg_1235_pp0_iter6_reg;
                trunc_ln38_1_reg_1258_pp0_iter2_reg <= trunc_ln38_1_reg_1258_pp0_iter1_reg;
                trunc_ln38_1_reg_1258_pp0_iter3_reg <= trunc_ln38_1_reg_1258_pp0_iter2_reg;
                trunc_ln38_1_reg_1258_pp0_iter4_reg <= trunc_ln38_1_reg_1258_pp0_iter3_reg;
                trunc_ln38_1_reg_1258_pp0_iter5_reg <= trunc_ln38_1_reg_1258_pp0_iter4_reg;
                trunc_ln38_1_reg_1258_pp0_iter6_reg <= trunc_ln38_1_reg_1258_pp0_iter5_reg;
                trunc_ln38_1_reg_1258_pp0_iter7_reg <= trunc_ln38_1_reg_1258_pp0_iter6_reg;
                trunc_ln38_1_reg_1258_pp0_iter8_reg <= trunc_ln38_1_reg_1258_pp0_iter7_reg;
                trunc_ln38_reg_1249_pp0_iter2_reg <= trunc_ln38_reg_1249_pp0_iter1_reg;
                trunc_ln38_reg_1249_pp0_iter3_reg <= trunc_ln38_reg_1249_pp0_iter2_reg;
                trunc_ln38_reg_1249_pp0_iter4_reg <= trunc_ln38_reg_1249_pp0_iter3_reg;
                trunc_ln38_reg_1249_pp0_iter5_reg <= trunc_ln38_reg_1249_pp0_iter4_reg;
                trunc_ln38_reg_1249_pp0_iter6_reg <= trunc_ln38_reg_1249_pp0_iter5_reg;
                trunc_ln38_reg_1249_pp0_iter7_reg <= trunc_ln38_reg_1249_pp0_iter6_reg;
                trunc_ln38_reg_1249_pp0_iter8_reg <= trunc_ln38_reg_1249_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_fu_992_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln83_1_reg_1403 <= add_ln83_1_fu_1084_p2;
                trunc_ln83_1_reg_1408 <= trunc_ln83_1_fu_1089_p1;
                trunc_ln83_reg_1396 <= trunc_ln83_fu_1044_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                coef_ti_read_reg_1195 <= coef_ti;
                coef_tij_read_reg_1200 <= coef_tij;
                coef_tj_read_reg_1190 <= coef_tj;
                    gmem_addr_1_reg_1211(29 downto 0) <= empty_9_fu_660_p1(32 - 1 downto 0)(29 downto 0);
                    gmem_addr_2_reg_1217(29 downto 0) <= empty_10_fu_680_p1(32 - 1 downto 0)(29 downto 0);
                    gmem_addr_3_reg_1223(29 downto 0) <= empty_11_fu_700_p1(32 - 1 downto 0)(29 downto 0);
                    gmem_addr_reg_1205(29 downto 0) <= empty_fu_640_p1(32 - 1 downto 0)(29 downto 0);
                iter_read_reg_1185 <= iter;
                    p_cast_reg_1229(29 downto 0) <= p_cast_fu_720_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                gmem_addr_1_read_reg_1352 <= gmem_RDATA;
                lshr_ln2_reg_1347_pp3_iter1_reg <= lshr_ln2_reg_1347;
                trunc_ln57_reg_1343_pp3_iter1_reg <= trunc_ln57_reg_1343;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                gmem_addr_2_read_reg_1328 <= gmem_RDATA;
                lshr_ln1_reg_1323_pp2_iter1_reg <= lshr_ln1_reg_1323;
                trunc_ln51_reg_1319_pp2_iter1_reg <= trunc_ln51_reg_1319;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                gmem_addr_3_read_reg_1304 <= gmem_RDATA;
                lshr_ln_reg_1299_pp1_iter1_reg <= lshr_ln_reg_1299;
                trunc_ln45_reg_1295_pp1_iter1_reg <= trunc_ln45_reg_1295;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_reg_1235_pp0_iter7_reg = ap_const_lv1_0))) then
                gmem_addr_4_read_reg_1278 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                gmem_addr_read_reg_1376 <= gmem_RDATA;
                lshr_ln3_reg_1371_pp4_iter1_reg <= lshr_ln3_reg_1371;
                trunc_ln63_reg_1367_pp4_iter1_reg <= trunc_ln63_reg_1367;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln78_reg_1382 <= icmp_ln78_fu_992_p2;
                icmp_ln78_reg_1382_pp5_iter1_reg <= icmp_ln78_reg_1382;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                icmp_ln78_reg_1382_pp5_iter2_reg <= icmp_ln78_reg_1382_pp5_iter1_reg;
                icmp_ln78_reg_1382_pp5_iter3_reg <= icmp_ln78_reg_1382_pp5_iter2_reg;
                icmp_ln78_reg_1382_pp5_iter4_reg <= icmp_ln78_reg_1382_pp5_iter3_reg;
                icmp_ln78_reg_1382_pp5_iter5_reg <= icmp_ln78_reg_1382_pp5_iter4_reg;
                icmp_ln78_reg_1382_pp5_iter6_reg <= icmp_ln78_reg_1382_pp5_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln48_fu_899_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                lshr_ln1_reg_1323 <= i2_0_reg_544(6 downto 1);
                trunc_ln51_reg_1319 <= trunc_ln51_fu_911_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln54_fu_930_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                lshr_ln2_reg_1347 <= i3_0_reg_555(6 downto 1);
                trunc_ln57_reg_1343 <= trunc_ln57_fu_942_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln60_fu_961_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                lshr_ln3_reg_1371 <= i4_0_reg_566(6 downto 1);
                trunc_ln63_reg_1367 <= trunc_ln63_fu_973_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln42_fu_868_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                lshr_ln_reg_1299 <= i1_0_reg_533(6 downto 1);
                trunc_ln45_reg_1295 <= trunc_ln45_fu_880_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_fu_724_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln38_1_reg_1244 <= select_ln38_1_fu_756_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_reg_1382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                select_ln83_2_reg_1446 <= select_ln83_2_fu_1177_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_fu_992_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                select_ln83_4_reg_1391 <= select_ln83_4_fu_1024_p3;
            end if;
        end if;
    end process;
    gmem_addr_reg_1205(31 downto 30) <= "00";
    gmem_addr_1_reg_1211(31 downto 30) <= "00";
    gmem_addr_2_reg_1217(31 downto 30) <= "00";
    gmem_addr_3_reg_1223(31 downto 30) <= "00";
    p_cast_reg_1229(30) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state42, ap_enable_reg_pp4_iter1, ap_CS_fsm_state32, ap_enable_reg_pp3_iter1, ap_CS_fsm_state22, ap_enable_reg_pp2_iter1, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter7, gmem_ARREADY, icmp_ln33_fu_724_p2, ap_enable_reg_pp0_iter0, icmp_ln42_fu_868_p2, ap_enable_reg_pp1_iter0, icmp_ln48_fu_899_p2, ap_enable_reg_pp2_iter0, icmp_ln54_fu_930_p2, ap_enable_reg_pp3_iter0, icmp_ln60_fu_961_p2, ap_enable_reg_pp4_iter0, icmp_ln78_fu_992_p2, ap_enable_reg_pp5_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_ap_done, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln33_fu_724_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln33_fu_724_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln42_fu_868_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln42_fu_868_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln48_fu_899_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln48_fu_899_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state32 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln54_fu_930_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln54_fu_930_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln60_fu_961_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln60_fu_961_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_Kernel64x64_fu_610_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln78_fu_992_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln78_fu_992_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln33_fu_730_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_500) + unsigned(ap_const_lv13_1));
    add_ln38_1_fu_816_p2 <= std_logic_vector(unsigned(p_cast_reg_1229) + unsigned(zext_ln38_2_fu_812_p1));
    add_ln38_2_fu_839_p2 <= std_logic_vector(unsigned(zext_ln36_fu_798_p1) + unsigned(zext_ln38_4_fu_835_p1));
    add_ln38_fu_806_p2 <= std_logic_vector(unsigned(zext_ln38_fu_772_p1) + unsigned(zext_ln38_1_fu_802_p1));
    add_ln78_fu_998_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_577) + unsigned(ap_const_lv13_1));
    add_ln83_1_fu_1084_p2 <= std_logic_vector(unsigned(p_cast_reg_1229) + unsigned(zext_ln83_3_fu_1080_p1));
    add_ln83_2_fu_1107_p2 <= std_logic_vector(unsigned(zext_ln83_1_fu_1066_p1) + unsigned(zext_ln83_5_fu_1103_p1));
    add_ln83_fu_1074_p2 <= std_logic_vector(unsigned(zext_ln83_fu_1040_p1) + unsigned(zext_ln83_2_fu_1070_p1));
    and_ln83_1_fu_1160_p2 <= (xor_ln83_1_fu_1155_p2 and trunc_ln83_reg_1396);
    and_ln83_2_fu_1173_p2 <= (trunc_ln83_reg_1396 and trunc_ln83_1_reg_1408);
    and_ln83_fu_1142_p2 <= (xor_ln83_fu_1127_p2 and trunc_ln83_1_reg_1408);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(33);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(36);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(2);
    ap_CS_fsm_state18 <= ap_CS_fsm(8);
    ap_CS_fsm_state22 <= ap_CS_fsm(10);
    ap_CS_fsm_state28 <= ap_CS_fsm(16);
    ap_CS_fsm_state32 <= ap_CS_fsm(18);
    ap_CS_fsm_state38 <= ap_CS_fsm(24);
    ap_CS_fsm_state42 <= ap_CS_fsm(26);
    ap_CS_fsm_state48 <= ap_CS_fsm(32);
    ap_CS_fsm_state52 <= ap_CS_fsm(34);
    ap_CS_fsm_state53 <= ap_CS_fsm(35);
    ap_CS_fsm_state62 <= ap_CS_fsm(37);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln33_reg_1235_pp0_iter7_reg, gmem_RVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((gmem_RVALID = ap_const_logic_0) and (icmp_ln33_reg_1235_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln33_reg_1235_pp0_iter7_reg, gmem_RVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((gmem_RVALID = ap_const_logic_0) and (icmp_ln33_reg_1235_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, gmem_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, gmem_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, gmem_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, gmem_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter1, gmem_RVALID)
    begin
                ap_block_pp4_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter1, gmem_RVALID)
    begin
                ap_block_pp4_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_01001_assign_proc : process(ap_enable_reg_pp5_iter7, icmp_ln78_reg_1382_pp5_iter6_reg, gmem_BVALID)
    begin
                ap_block_pp5_stage0_01001 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln78_reg_1382_pp5_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter7, icmp_ln78_reg_1382_pp5_iter6_reg, gmem_BVALID, ap_block_state55_io, ap_block_state56_io)
    begin
                ap_block_pp5_stage0_11001 <= (((gmem_BVALID = ap_const_logic_0) and (icmp_ln78_reg_1382_pp5_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state56_io) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state55_io) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter7, icmp_ln78_reg_1382_pp5_iter6_reg, gmem_BVALID, ap_block_state55_io, ap_block_state56_io)
    begin
                ap_block_pp5_stage0_subdone <= (((gmem_BVALID = ap_const_logic_0) and (icmp_ln78_reg_1382_pp5_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state56_io) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state55_io) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(icmp_ln33_reg_1235_pp0_iter7_reg, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln33_reg_1235_pp0_iter7_reg = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= (gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_pp2_stage0_iter1_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state30_pp2_stage0_iter1 <= (gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state31_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(icmp_ln33_reg_1235, gmem_ARREADY)
    begin
                ap_block_state3_io <= ((gmem_ARREADY = ap_const_logic_0) and (icmp_ln33_reg_1235 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state40_pp3_stage0_iter1_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state40_pp3_stage0_iter1 <= (gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state41_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state50_pp4_stage0_iter1_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state50_pp4_stage0_iter1 <= (gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state51_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state55_io_assign_proc : process(icmp_ln78_reg_1382, gmem_AWREADY)
    begin
                ap_block_state55_io <= ((gmem_AWREADY = ap_const_logic_0) and (icmp_ln78_reg_1382 = ap_const_lv1_0));
    end process;

        ap_block_state55_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state56_io_assign_proc : process(icmp_ln78_reg_1382_pp5_iter1_reg, gmem_WREADY)
    begin
                ap_block_state56_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln78_reg_1382_pp5_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state56_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp5_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp5_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state61_pp5_stage0_iter7_assign_proc : process(icmp_ln78_reg_1382_pp5_iter6_reg, gmem_BVALID)
    begin
                ap_block_state61_pp5_stage0_iter7 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln78_reg_1382_pp5_iter6_reg = ap_const_lv1_0));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln33_fu_724_p2)
    begin
        if ((icmp_ln33_fu_724_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(icmp_ln42_fu_868_p2)
    begin
        if ((icmp_ln42_fu_868_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state29_assign_proc : process(icmp_ln48_fu_899_p2)
    begin
        if ((icmp_ln48_fu_899_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state39_assign_proc : process(icmp_ln54_fu_930_p2)
    begin
        if ((icmp_ln54_fu_930_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state39 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state49_assign_proc : process(icmp_ln60_fu_961_p2)
    begin
        if ((icmp_ln60_fu_961_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state49 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state54_assign_proc : process(icmp_ln78_fu_992_p2)
    begin
        if ((icmp_ln78_fu_992_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter7, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter5, ap_enable_reg_pp5_iter6)
    begin
        if (((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter5 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i5_0_phi_fu_592_p4_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln78_reg_1382, i5_0_reg_588, select_ln83_4_reg_1391)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln78_reg_1382 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            ap_phi_mux_i5_0_phi_fu_592_p4 <= select_ln83_4_reg_1391;
        else 
            ap_phi_mux_i5_0_phi_fu_592_p4 <= i5_0_reg_588;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_515_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln33_reg_1235, i_0_reg_511, select_ln38_1_reg_1244)
    begin
        if (((icmp_ln33_reg_1235 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_515_p4 <= select_ln38_1_reg_1244;
        else 
            ap_phi_mux_i_0_phi_fu_515_p4 <= i_0_reg_511;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    array_buffer_0_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_0_address0, zext_ln38_5_fu_861_p1, zext_ln83_6_fu_1113_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            array_buffer_0_0_address0 <= zext_ln83_6_fu_1113_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_0_0_address0 <= zext_ln38_5_fu_861_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_0_address0 <= grp_Kernel64x64_fu_610_array_buffer_0_0_address0;
        else 
            array_buffer_0_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    array_buffer_0_0_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp0_stage0_11001, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_0_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            array_buffer_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_0_ce0 <= grp_Kernel64x64_fu_610_array_buffer_0_0_ce0;
        else 
            array_buffer_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_0_0_ce1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_0_ce1 <= grp_Kernel64x64_fu_610_array_buffer_0_0_ce1;
        else 
            array_buffer_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_0_0_d0_assign_proc : process(ap_block_pp0_stage0, gmem_addr_4_read_reg_1278, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_0_d0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_0_0_d0 <= gmem_addr_4_read_reg_1278;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_0_d0 <= grp_Kernel64x64_fu_610_array_buffer_0_0_d0;
        else 
            array_buffer_0_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_buffer_0_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln38_reg_1249_pp0_iter8_reg, trunc_ln38_1_reg_1258_pp0_iter8_reg, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_0_we0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln38_1_reg_1258_pp0_iter8_reg = ap_const_lv1_0) and (trunc_ln38_reg_1249_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_0_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_0_we0 <= grp_Kernel64x64_fu_610_array_buffer_0_0_we0;
        else 
            array_buffer_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_0_1_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_1_address0, zext_ln38_5_fu_861_p1, zext_ln83_6_fu_1113_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            array_buffer_0_1_address0 <= zext_ln83_6_fu_1113_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_0_1_address0 <= zext_ln38_5_fu_861_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_1_address0 <= grp_Kernel64x64_fu_610_array_buffer_0_1_address0;
        else 
            array_buffer_0_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    array_buffer_0_1_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp0_stage0_11001, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_1_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            array_buffer_0_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_1_ce0 <= grp_Kernel64x64_fu_610_array_buffer_0_1_ce0;
        else 
            array_buffer_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_0_1_ce1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_1_ce1 <= grp_Kernel64x64_fu_610_array_buffer_0_1_ce1;
        else 
            array_buffer_0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_0_1_d0_assign_proc : process(ap_block_pp0_stage0, gmem_addr_4_read_reg_1278, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_1_d0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_0_1_d0 <= gmem_addr_4_read_reg_1278;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_1_d0 <= grp_Kernel64x64_fu_610_array_buffer_0_1_d0;
        else 
            array_buffer_0_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_buffer_0_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln38_reg_1249_pp0_iter8_reg, trunc_ln38_1_reg_1258_pp0_iter8_reg, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_0_1_we0)
    begin
        if (((trunc_ln38_1_reg_1258_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln38_reg_1249_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_0_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_0_1_we0 <= grp_Kernel64x64_fu_610_array_buffer_0_1_we0;
        else 
            array_buffer_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_1_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_1_0_address0, zext_ln38_5_fu_861_p1, zext_ln83_6_fu_1113_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            array_buffer_1_0_address0 <= zext_ln83_6_fu_1113_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_1_0_address0 <= zext_ln38_5_fu_861_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_1_0_address0 <= grp_Kernel64x64_fu_610_array_buffer_1_0_address0;
        else 
            array_buffer_1_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    array_buffer_1_0_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp0_stage0_11001, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_1_0_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            array_buffer_1_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_1_0_ce0 <= grp_Kernel64x64_fu_610_array_buffer_1_0_ce0;
        else 
            array_buffer_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_1_0_ce1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_1_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_1_0_ce1 <= grp_Kernel64x64_fu_610_array_buffer_1_0_ce1;
        else 
            array_buffer_1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_1_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln38_reg_1249_pp0_iter8_reg, trunc_ln38_1_reg_1258_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((trunc_ln38_reg_1249_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln38_1_reg_1258_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_1_0_we0 <= ap_const_logic_1;
        else 
            array_buffer_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_1_0_we1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_1_0_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_1_0_we1 <= grp_Kernel64x64_fu_610_array_buffer_1_0_we1;
        else 
            array_buffer_1_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_1_1_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_1_1_address0, zext_ln38_5_fu_861_p1, zext_ln83_6_fu_1113_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            array_buffer_1_1_address0 <= zext_ln83_6_fu_1113_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_1_1_address0 <= zext_ln38_5_fu_861_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_1_1_address0 <= grp_Kernel64x64_fu_610_array_buffer_1_1_address0;
        else 
            array_buffer_1_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    array_buffer_1_1_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp0_stage0_11001, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_1_1_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            array_buffer_1_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_1_1_ce0 <= grp_Kernel64x64_fu_610_array_buffer_1_1_ce0;
        else 
            array_buffer_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_1_1_ce1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_1_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_1_1_ce1 <= grp_Kernel64x64_fu_610_array_buffer_1_1_ce1;
        else 
            array_buffer_1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_1_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln38_reg_1249_pp0_iter8_reg, trunc_ln38_1_reg_1258_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((trunc_ln38_1_reg_1258_pp0_iter8_reg = ap_const_lv1_1) and (trunc_ln38_reg_1249_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_buffer_1_1_we0 <= ap_const_logic_1;
        else 
            array_buffer_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_buffer_1_1_we1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_array_buffer_1_1_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            array_buffer_1_1_we1 <= grp_Kernel64x64_fu_610_array_buffer_1_1_we1;
        else 
            array_buffer_1_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    bondary_e9_fu_630_p4 <= bondary_e(31 downto 2);

    bondary_e_buffer_0_address0_assign_proc : process(ap_block_pp4_stage0, ap_enable_reg_pp4_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_e_buffer_0_address0, zext_ln63_fu_987_p1)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            bondary_e_buffer_0_address0 <= zext_ln63_fu_987_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_e_buffer_0_address0 <= grp_Kernel64x64_fu_610_bondary_e_buffer_0_address0;
        else 
            bondary_e_buffer_0_address0 <= "XXXXX";
        end if; 
    end process;


    bondary_e_buffer_0_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            bondary_e_buffer_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_e_buffer_0_ce0 <= grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce0;
        else 
            bondary_e_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_e_buffer_0_ce1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_e_buffer_0_ce1 <= grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce1;
        else 
            bondary_e_buffer_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_e_buffer_0_we0_assign_proc : process(ap_block_pp4_stage0_11001, trunc_ln63_reg_1367_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (trunc_ln63_reg_1367_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            bondary_e_buffer_0_we0 <= ap_const_logic_1;
        else 
            bondary_e_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_e_buffer_1_address0_assign_proc : process(ap_block_pp4_stage0, ap_enable_reg_pp4_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_e_buffer_1_address0, zext_ln63_fu_987_p1)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            bondary_e_buffer_1_address0 <= zext_ln63_fu_987_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_e_buffer_1_address0 <= grp_Kernel64x64_fu_610_bondary_e_buffer_1_address0;
        else 
            bondary_e_buffer_1_address0 <= "XXXXX";
        end if; 
    end process;


    bondary_e_buffer_1_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            bondary_e_buffer_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_e_buffer_1_ce0 <= grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce0;
        else 
            bondary_e_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_e_buffer_1_ce1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_e_buffer_1_ce1 <= grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce1;
        else 
            bondary_e_buffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_e_buffer_1_we0_assign_proc : process(ap_block_pp4_stage0_11001, trunc_ln63_reg_1367_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
        if (((trunc_ln63_reg_1367_pp4_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            bondary_e_buffer_1_we0 <= ap_const_logic_1;
        else 
            bondary_e_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bondary_n3_fu_690_p4 <= bondary_n(31 downto 2);

    bondary_n_buffer_0_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_n_buffer_0_address0, zext_ln45_fu_894_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            bondary_n_buffer_0_address0 <= zext_ln45_fu_894_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_n_buffer_0_address0 <= grp_Kernel64x64_fu_610_bondary_n_buffer_0_address0;
        else 
            bondary_n_buffer_0_address0 <= "XXXXX";
        end if; 
    end process;


    bondary_n_buffer_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_n_buffer_0_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bondary_n_buffer_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_n_buffer_0_ce0 <= grp_Kernel64x64_fu_610_bondary_n_buffer_0_ce0;
        else 
            bondary_n_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_n_buffer_0_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln45_reg_1295_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (trunc_ln45_reg_1295_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bondary_n_buffer_0_we0 <= ap_const_logic_1;
        else 
            bondary_n_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_n_buffer_1_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_n_buffer_1_address0, zext_ln45_fu_894_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            bondary_n_buffer_1_address0 <= zext_ln45_fu_894_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_n_buffer_1_address0 <= grp_Kernel64x64_fu_610_bondary_n_buffer_1_address0;
        else 
            bondary_n_buffer_1_address0 <= "XXXXX";
        end if; 
    end process;


    bondary_n_buffer_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_n_buffer_1_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bondary_n_buffer_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_n_buffer_1_ce0 <= grp_Kernel64x64_fu_610_bondary_n_buffer_1_ce0;
        else 
            bondary_n_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_n_buffer_1_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln45_reg_1295_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((trunc_ln45_reg_1295_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            bondary_n_buffer_1_we0 <= ap_const_logic_1;
        else 
            bondary_n_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bondary_s5_fu_670_p4 <= bondary_s(31 downto 2);

    bondary_s_buffer_0_address0_assign_proc : process(ap_block_pp2_stage0, ap_enable_reg_pp2_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_s_buffer_0_address0, zext_ln51_fu_925_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            bondary_s_buffer_0_address0 <= zext_ln51_fu_925_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_s_buffer_0_address0 <= grp_Kernel64x64_fu_610_bondary_s_buffer_0_address0;
        else 
            bondary_s_buffer_0_address0 <= "XXXXX";
        end if; 
    end process;


    bondary_s_buffer_0_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_s_buffer_0_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bondary_s_buffer_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_s_buffer_0_ce0 <= grp_Kernel64x64_fu_610_bondary_s_buffer_0_ce0;
        else 
            bondary_s_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_s_buffer_0_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln51_reg_1319_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln51_reg_1319_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bondary_s_buffer_0_we0 <= ap_const_logic_1;
        else 
            bondary_s_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_s_buffer_1_address0_assign_proc : process(ap_block_pp2_stage0, ap_enable_reg_pp2_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_s_buffer_1_address0, zext_ln51_fu_925_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            bondary_s_buffer_1_address0 <= zext_ln51_fu_925_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_s_buffer_1_address0 <= grp_Kernel64x64_fu_610_bondary_s_buffer_1_address0;
        else 
            bondary_s_buffer_1_address0 <= "XXXXX";
        end if; 
    end process;


    bondary_s_buffer_1_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_s_buffer_1_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bondary_s_buffer_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_s_buffer_1_ce0 <= grp_Kernel64x64_fu_610_bondary_s_buffer_1_ce0;
        else 
            bondary_s_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_s_buffer_1_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln51_reg_1319_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((trunc_ln51_reg_1319_pp2_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            bondary_s_buffer_1_we0 <= ap_const_logic_1;
        else 
            bondary_s_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bondary_w7_fu_650_p4 <= bondary_w(31 downto 2);

    bondary_w_buffer_0_address0_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_w_buffer_0_address0, zext_ln57_fu_956_p1)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            bondary_w_buffer_0_address0 <= zext_ln57_fu_956_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_w_buffer_0_address0 <= grp_Kernel64x64_fu_610_bondary_w_buffer_0_address0;
        else 
            bondary_w_buffer_0_address0 <= "XXXXX";
        end if; 
    end process;


    bondary_w_buffer_0_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bondary_w_buffer_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_w_buffer_0_ce0 <= grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce0;
        else 
            bondary_w_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_w_buffer_0_ce1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_w_buffer_0_ce1 <= grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce1;
        else 
            bondary_w_buffer_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_w_buffer_0_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln57_reg_1343_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (trunc_ln57_reg_1343_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bondary_w_buffer_0_we0 <= ap_const_logic_1;
        else 
            bondary_w_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_w_buffer_1_address0_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_w_buffer_1_address0, zext_ln57_fu_956_p1)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            bondary_w_buffer_1_address0 <= zext_ln57_fu_956_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_w_buffer_1_address0 <= grp_Kernel64x64_fu_610_bondary_w_buffer_1_address0;
        else 
            bondary_w_buffer_1_address0 <= "XXXXX";
        end if; 
    end process;


    bondary_w_buffer_1_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2, ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bondary_w_buffer_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_w_buffer_1_ce0 <= grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce0;
        else 
            bondary_w_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_w_buffer_1_ce1_assign_proc : process(ap_CS_fsm_state53, grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            bondary_w_buffer_1_ce1 <= grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce1;
        else 
            bondary_w_buffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bondary_w_buffer_1_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln57_reg_1343_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((trunc_ln57_reg_1343_pp3_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            bondary_w_buffer_1_we0 <= ap_const_logic_1;
        else 
            bondary_w_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bondary_s5_fu_670_p4),64));
    empty_11_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bondary_n3_fu_690_p4),64));
    empty_9_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bondary_w7_fu_650_p4),64));
    empty_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bondary_e9_fu_630_p4),64));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln33_reg_1235, gmem_ARREADY, gmem_addr_reg_1205, gmem_addr_1_reg_1211, gmem_addr_2_reg_1217, gmem_addr_3_reg_1223, ap_block_pp0_stage0_11001, zext_ln38_3_fu_851_p1)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            gmem_ARADDR <= gmem_addr_reg_1205;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            gmem_ARADDR <= gmem_addr_1_reg_1211;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            gmem_ARADDR <= gmem_addr_2_reg_1217;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_ARADDR <= gmem_addr_3_reg_1223;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_reg_1235 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_ARADDR <= zext_ln38_3_fu_851_p1(32 - 1 downto 0);
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln33_reg_1235, gmem_ARREADY, ap_block_pp0_stage0_11001)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            gmem_ARLEN <= ap_const_lv32_40;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_reg_1235 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln33_reg_1235, gmem_ARREADY, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_reg_1235 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_AWADDR <= zext_ln83_4_fu_1132_p1(32 - 1 downto 0);

    gmem_AWVALID_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln78_reg_1382, ap_block_pp5_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_reg_1382 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_enable_reg_pp5_iter7, icmp_ln78_reg_1382_pp5_iter6_reg, ap_block_pp5_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_reg_1382_pp5_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter8, icmp_ln33_reg_1235_pp0_iter7_reg, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_reg_1235_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp5_iter2, icmp_ln78_reg_1382_pp5_iter1_reg, ap_block_pp5_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln78_reg_1382_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state42, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln33_reg_1235)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((icmp_ln33_reg_1235 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln78_reg_1382)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln78_reg_1382 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_block_pp5_stage0, ap_enable_reg_pp5_iter7, icmp_ln78_reg_1382_pp5_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln78_reg_1382_pp5_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln33_reg_1235_pp0_iter7_reg)
    begin
        if ((((icmp_ln33_reg_1235_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_block_pp5_stage0, ap_enable_reg_pp5_iter2, icmp_ln78_reg_1382_pp5_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln78_reg_1382_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_Kernel64x64_fu_610_ap_start <= grp_Kernel64x64_fu_610_ap_start_reg;
    i_2_fu_736_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(ap_phi_mux_i_0_phi_fu_515_p4));
    i_3_fu_905_p2 <= std_logic_vector(unsigned(i2_0_reg_544) + unsigned(ap_const_lv7_1));
    i_4_fu_936_p2 <= std_logic_vector(unsigned(i3_0_reg_555) + unsigned(ap_const_lv7_1));
    i_6_fu_1004_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(ap_phi_mux_i5_0_phi_fu_592_p4));
    i_7_fu_967_p2 <= std_logic_vector(unsigned(i4_0_reg_566) + unsigned(ap_const_lv7_1));
    i_fu_874_p2 <= std_logic_vector(unsigned(i1_0_reg_533) + unsigned(ap_const_lv7_1));
    icmp_ln33_fu_724_p2 <= "1" when (indvar_flatten_reg_500 = ap_const_lv13_1000) else "0";
    icmp_ln35_fu_742_p2 <= "1" when (j_0_reg_522 = ap_const_lv7_40) else "0";
    icmp_ln42_fu_868_p2 <= "1" when (i1_0_reg_533 = ap_const_lv7_40) else "0";
    icmp_ln48_fu_899_p2 <= "1" when (i2_0_reg_544 = ap_const_lv7_40) else "0";
    icmp_ln54_fu_930_p2 <= "1" when (i3_0_reg_555 = ap_const_lv7_40) else "0";
    icmp_ln60_fu_961_p2 <= "1" when (i4_0_reg_566 = ap_const_lv7_40) else "0";
    icmp_ln78_fu_992_p2 <= "1" when (indvar_flatten6_reg_577 = ap_const_lv13_1000) else "0";
    icmp_ln80_fu_1010_p2 <= "1" when (j6_0_reg_599 = ap_const_lv7_40) else "0";
    j_1_fu_1121_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(select_ln83_3_fu_1016_p3));
    j_fu_845_p2 <= std_logic_vector(unsigned(select_ln38_fu_748_p3) + unsigned(ap_const_lv7_1));
    p_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_710_p4),31));
    select_ln38_1_fu_756_p3 <= 
        i_2_fu_736_p2 when (icmp_ln35_fu_742_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_515_p4;
    select_ln38_fu_748_p3 <= 
        ap_const_lv7_0 when (icmp_ln35_fu_742_p2(0) = '1') else 
        j_0_reg_522;
    select_ln83_1_fu_1165_p3 <= 
        array_buffer_1_0_q0 when (and_ln83_1_fu_1160_p2(0) = '1') else 
        select_ln83_fu_1147_p3;
    select_ln83_2_fu_1177_p3 <= 
        array_buffer_1_1_q0 when (and_ln83_2_fu_1173_p2(0) = '1') else 
        select_ln83_1_fu_1165_p3;
    select_ln83_3_fu_1016_p3 <= 
        ap_const_lv7_0 when (icmp_ln80_fu_1010_p2(0) = '1') else 
        j6_0_reg_599;
    select_ln83_4_fu_1024_p3 <= 
        i_6_fu_1004_p2 when (icmp_ln80_fu_1010_p2(0) = '1') else 
        ap_phi_mux_i5_0_phi_fu_592_p4;
    select_ln83_fu_1147_p3 <= 
        array_buffer_0_1_q0 when (and_ln83_fu_1142_p2(0) = '1') else 
        array_buffer_0_0_q0;
    tmp_10_fu_710_p4 <= initial_array(31 downto 2);
    tmp_11_fu_825_p4 <= select_ln38_fu_748_p3(6 downto 1);
    tmp_12_fu_1093_p4 <= select_ln83_3_fu_1016_p3(6 downto 1);
    tmp_6_fu_764_p3 <= (select_ln38_1_fu_756_p3 & ap_const_lv6_0);
    tmp_7_fu_790_p3 <= (zext_ln38_2_mid2_v_fu_780_p4 & ap_const_lv5_0);
    tmp_8_fu_1032_p3 <= (select_ln83_4_fu_1024_p3 & ap_const_lv6_0);
    tmp_9_fu_1058_p3 <= (zext_ln83_2_mid2_v_fu_1048_p4 & ap_const_lv5_0);
    trunc_ln38_1_fu_821_p1 <= select_ln38_fu_748_p3(1 - 1 downto 0);
    trunc_ln38_fu_776_p1 <= select_ln38_1_fu_756_p3(1 - 1 downto 0);
    trunc_ln45_fu_880_p1 <= i1_0_reg_533(1 - 1 downto 0);
    trunc_ln51_fu_911_p1 <= i2_0_reg_544(1 - 1 downto 0);
    trunc_ln57_fu_942_p1 <= i3_0_reg_555(1 - 1 downto 0);
    trunc_ln63_fu_973_p1 <= i4_0_reg_566(1 - 1 downto 0);
    trunc_ln83_1_fu_1089_p1 <= select_ln83_3_fu_1016_p3(1 - 1 downto 0);
    trunc_ln83_fu_1044_p1 <= select_ln83_4_fu_1024_p3(1 - 1 downto 0);
    xor_ln83_1_fu_1155_p2 <= (trunc_ln83_1_reg_1408 xor ap_const_lv1_1);
    xor_ln83_fu_1127_p2 <= (trunc_ln83_reg_1396 xor ap_const_lv1_1);
    zext_ln36_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_790_p3),12));
    zext_ln38_1_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_748_p3),14));
    zext_ln38_2_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_806_p2),31));
    zext_ln38_2_mid2_v_fu_780_p4 <= select_ln38_1_fu_756_p3(6 downto 1);
    zext_ln38_3_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_1_reg_1253),64));
    zext_ln38_4_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_825_p4),12));
    zext_ln38_5_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_2_reg_1262_pp0_iter8_reg),64));
    zext_ln38_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_764_p3),14));
    zext_ln45_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1299_pp1_iter1_reg),64));
    zext_ln51_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_1323_pp2_iter1_reg),64));
    zext_ln57_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_1347_pp3_iter1_reg),64));
    zext_ln63_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_reg_1371_pp4_iter1_reg),64));
    zext_ln83_1_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1058_p3),12));
    zext_ln83_2_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_3_fu_1016_p3),14));
    zext_ln83_2_mid2_v_fu_1048_p4 <= select_ln83_4_fu_1024_p3(6 downto 1);
    zext_ln83_3_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_fu_1074_p2),31));
    zext_ln83_4_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_1_reg_1403),64));
    zext_ln83_5_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1093_p4),12));
    zext_ln83_6_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_2_fu_1107_p2),64));
    zext_ln83_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1032_p3),14));
end behav;
