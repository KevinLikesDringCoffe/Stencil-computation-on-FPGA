// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="wrapper,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=4684504,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=60,HLS_SYN_FF=13101,HLS_SYN_LUT=15872,HLS_VERSION=2019_2}" *)

module wrapper (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_pp0_stage0 = 38'd2;
parameter    ap_ST_fsm_state12 = 38'd4;
parameter    ap_ST_fsm_state13 = 38'd8;
parameter    ap_ST_fsm_state14 = 38'd16;
parameter    ap_ST_fsm_state15 = 38'd32;
parameter    ap_ST_fsm_state16 = 38'd64;
parameter    ap_ST_fsm_state17 = 38'd128;
parameter    ap_ST_fsm_state18 = 38'd256;
parameter    ap_ST_fsm_pp1_stage0 = 38'd512;
parameter    ap_ST_fsm_state22 = 38'd1024;
parameter    ap_ST_fsm_state23 = 38'd2048;
parameter    ap_ST_fsm_state24 = 38'd4096;
parameter    ap_ST_fsm_state25 = 38'd8192;
parameter    ap_ST_fsm_state26 = 38'd16384;
parameter    ap_ST_fsm_state27 = 38'd32768;
parameter    ap_ST_fsm_state28 = 38'd65536;
parameter    ap_ST_fsm_pp2_stage0 = 38'd131072;
parameter    ap_ST_fsm_state32 = 38'd262144;
parameter    ap_ST_fsm_state33 = 38'd524288;
parameter    ap_ST_fsm_state34 = 38'd1048576;
parameter    ap_ST_fsm_state35 = 38'd2097152;
parameter    ap_ST_fsm_state36 = 38'd4194304;
parameter    ap_ST_fsm_state37 = 38'd8388608;
parameter    ap_ST_fsm_state38 = 38'd16777216;
parameter    ap_ST_fsm_pp3_stage0 = 38'd33554432;
parameter    ap_ST_fsm_state42 = 38'd67108864;
parameter    ap_ST_fsm_state43 = 38'd134217728;
parameter    ap_ST_fsm_state44 = 38'd268435456;
parameter    ap_ST_fsm_state45 = 38'd536870912;
parameter    ap_ST_fsm_state46 = 38'd1073741824;
parameter    ap_ST_fsm_state47 = 38'd2147483648;
parameter    ap_ST_fsm_state48 = 38'd4294967296;
parameter    ap_ST_fsm_pp4_stage0 = 38'd8589934592;
parameter    ap_ST_fsm_state52 = 38'd17179869184;
parameter    ap_ST_fsm_state53 = 38'd34359738368;
parameter    ap_ST_fsm_pp5_stage0 = 38'd68719476736;
parameter    ap_ST_fsm_state62 = 38'd137438953472;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] initial_array;
wire   [31:0] bondary_n;
wire   [31:0] bondary_s;
wire   [31:0] bondary_w;
wire   [31:0] bondary_e;
wire   [31:0] coef_tij;
wire   [31:0] coef_ti;
wire   [31:0] coef_tj;
wire   [31:0] iter;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state42;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln33_reg_1235;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln33_reg_1235_pp0_iter7_reg;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln78_reg_1382;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp5_iter2;
reg   [0:0] icmp_ln78_reg_1382_pp5_iter1_reg;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp5_iter7;
reg   [0:0] icmp_ln78_reg_1382_pp5_iter6_reg;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
wire   [31:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [12:0] indvar_flatten_reg_500;
reg   [6:0] i_0_reg_511;
reg   [6:0] j_0_reg_522;
reg   [6:0] i1_0_reg_533;
reg   [6:0] i2_0_reg_544;
reg   [6:0] i3_0_reg_555;
reg   [6:0] i4_0_reg_566;
reg   [12:0] indvar_flatten6_reg_577;
reg   [6:0] i5_0_reg_588;
reg   [6:0] j6_0_reg_599;
reg   [31:0] iter_read_reg_1185;
reg   [31:0] coef_tj_read_reg_1190;
reg   [31:0] coef_ti_read_reg_1195;
reg   [31:0] coef_tij_read_reg_1200;
reg   [31:0] gmem_addr_reg_1205;
reg   [31:0] gmem_addr_1_reg_1211;
reg   [31:0] gmem_addr_2_reg_1217;
reg   [31:0] gmem_addr_3_reg_1223;
wire   [30:0] p_cast_fu_720_p1;
reg   [30:0] p_cast_reg_1229;
wire   [0:0] icmp_ln33_fu_724_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln33_reg_1235_pp0_iter1_reg;
reg   [0:0] icmp_ln33_reg_1235_pp0_iter2_reg;
reg   [0:0] icmp_ln33_reg_1235_pp0_iter3_reg;
reg   [0:0] icmp_ln33_reg_1235_pp0_iter4_reg;
reg   [0:0] icmp_ln33_reg_1235_pp0_iter5_reg;
reg   [0:0] icmp_ln33_reg_1235_pp0_iter6_reg;
wire   [12:0] add_ln33_fu_730_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] select_ln38_1_fu_756_p3;
reg   [6:0] select_ln38_1_reg_1244;
wire   [0:0] trunc_ln38_fu_776_p1;
reg   [0:0] trunc_ln38_reg_1249;
reg   [0:0] trunc_ln38_reg_1249_pp0_iter1_reg;
reg   [0:0] trunc_ln38_reg_1249_pp0_iter2_reg;
reg   [0:0] trunc_ln38_reg_1249_pp0_iter3_reg;
reg   [0:0] trunc_ln38_reg_1249_pp0_iter4_reg;
reg   [0:0] trunc_ln38_reg_1249_pp0_iter5_reg;
reg   [0:0] trunc_ln38_reg_1249_pp0_iter6_reg;
reg   [0:0] trunc_ln38_reg_1249_pp0_iter7_reg;
reg   [0:0] trunc_ln38_reg_1249_pp0_iter8_reg;
wire   [30:0] add_ln38_1_fu_816_p2;
reg   [30:0] add_ln38_1_reg_1253;
wire   [0:0] trunc_ln38_1_fu_821_p1;
reg   [0:0] trunc_ln38_1_reg_1258;
reg   [0:0] trunc_ln38_1_reg_1258_pp0_iter1_reg;
reg   [0:0] trunc_ln38_1_reg_1258_pp0_iter2_reg;
reg   [0:0] trunc_ln38_1_reg_1258_pp0_iter3_reg;
reg   [0:0] trunc_ln38_1_reg_1258_pp0_iter4_reg;
reg   [0:0] trunc_ln38_1_reg_1258_pp0_iter5_reg;
reg   [0:0] trunc_ln38_1_reg_1258_pp0_iter6_reg;
reg   [0:0] trunc_ln38_1_reg_1258_pp0_iter7_reg;
reg   [0:0] trunc_ln38_1_reg_1258_pp0_iter8_reg;
wire   [11:0] add_ln38_2_fu_839_p2;
reg   [11:0] add_ln38_2_reg_1262;
reg   [11:0] add_ln38_2_reg_1262_pp0_iter1_reg;
reg   [11:0] add_ln38_2_reg_1262_pp0_iter2_reg;
reg   [11:0] add_ln38_2_reg_1262_pp0_iter3_reg;
reg   [11:0] add_ln38_2_reg_1262_pp0_iter4_reg;
reg   [11:0] add_ln38_2_reg_1262_pp0_iter5_reg;
reg   [11:0] add_ln38_2_reg_1262_pp0_iter6_reg;
reg   [11:0] add_ln38_2_reg_1262_pp0_iter7_reg;
reg   [11:0] add_ln38_2_reg_1262_pp0_iter8_reg;
wire   [6:0] j_fu_845_p2;
reg   [31:0] gmem_addr_4_read_reg_1278;
wire   [0:0] icmp_ln42_fu_868_p2;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [6:0] i_fu_874_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] trunc_ln45_fu_880_p1;
reg   [0:0] trunc_ln45_reg_1295;
reg   [0:0] trunc_ln45_reg_1295_pp1_iter1_reg;
reg   [5:0] lshr_ln_reg_1299;
reg   [5:0] lshr_ln_reg_1299_pp1_iter1_reg;
reg   [31:0] gmem_addr_3_read_reg_1304;
wire   [0:0] icmp_ln48_fu_899_p2;
wire    ap_block_state29_pp2_stage0_iter0;
reg    ap_block_state30_pp2_stage0_iter1;
wire    ap_block_state31_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [6:0] i_3_fu_905_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] trunc_ln51_fu_911_p1;
reg   [0:0] trunc_ln51_reg_1319;
reg   [0:0] trunc_ln51_reg_1319_pp2_iter1_reg;
reg   [5:0] lshr_ln1_reg_1323;
reg   [5:0] lshr_ln1_reg_1323_pp2_iter1_reg;
reg   [31:0] gmem_addr_2_read_reg_1328;
wire   [0:0] icmp_ln54_fu_930_p2;
wire    ap_block_state39_pp3_stage0_iter0;
reg    ap_block_state40_pp3_stage0_iter1;
wire    ap_block_state41_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
wire   [6:0] i_4_fu_936_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] trunc_ln57_fu_942_p1;
reg   [0:0] trunc_ln57_reg_1343;
reg   [0:0] trunc_ln57_reg_1343_pp3_iter1_reg;
reg   [5:0] lshr_ln2_reg_1347;
reg   [5:0] lshr_ln2_reg_1347_pp3_iter1_reg;
reg   [31:0] gmem_addr_1_read_reg_1352;
wire   [0:0] icmp_ln60_fu_961_p2;
wire    ap_block_state49_pp4_stage0_iter0;
reg    ap_block_state50_pp4_stage0_iter1;
wire    ap_block_state51_pp4_stage0_iter2;
reg    ap_block_pp4_stage0_11001;
wire   [6:0] i_7_fu_967_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] trunc_ln63_fu_973_p1;
reg   [0:0] trunc_ln63_reg_1367;
reg   [0:0] trunc_ln63_reg_1367_pp4_iter1_reg;
reg   [5:0] lshr_ln3_reg_1371;
reg   [5:0] lshr_ln3_reg_1371_pp4_iter1_reg;
reg   [31:0] gmem_addr_read_reg_1376;
wire   [0:0] icmp_ln78_fu_992_p2;
wire    ap_block_state54_pp5_stage0_iter0;
wire    ap_block_state55_pp5_stage0_iter1;
reg    ap_block_state55_io;
wire    ap_block_state56_pp5_stage0_iter2;
reg    ap_block_state56_io;
wire    ap_block_state57_pp5_stage0_iter3;
wire    ap_block_state58_pp5_stage0_iter4;
wire    ap_block_state59_pp5_stage0_iter5;
wire    ap_block_state60_pp5_stage0_iter6;
reg    ap_block_state61_pp5_stage0_iter7;
reg    ap_block_pp5_stage0_11001;
reg   [0:0] icmp_ln78_reg_1382_pp5_iter2_reg;
reg   [0:0] icmp_ln78_reg_1382_pp5_iter3_reg;
reg   [0:0] icmp_ln78_reg_1382_pp5_iter4_reg;
reg   [0:0] icmp_ln78_reg_1382_pp5_iter5_reg;
wire   [12:0] add_ln78_fu_998_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [6:0] select_ln83_4_fu_1024_p3;
reg   [6:0] select_ln83_4_reg_1391;
wire   [0:0] trunc_ln83_fu_1044_p1;
reg   [0:0] trunc_ln83_reg_1396;
wire   [30:0] add_ln83_1_fu_1084_p2;
reg   [30:0] add_ln83_1_reg_1403;
wire   [0:0] trunc_ln83_1_fu_1089_p1;
reg   [0:0] trunc_ln83_1_reg_1408;
wire   [6:0] j_1_fu_1121_p2;
wire   [31:0] select_ln83_2_fu_1177_p3;
reg   [31:0] select_ln83_2_reg_1446;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state28;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state29;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state38;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state39;
reg    ap_enable_reg_pp3_iter2;
wire    ap_CS_fsm_state48;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state49;
reg    ap_enable_reg_pp4_iter2;
wire    ap_CS_fsm_state53;
wire    grp_Kernel64x64_fu_610_ap_ready;
wire    grp_Kernel64x64_fu_610_ap_done;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state54;
reg    ap_enable_reg_pp5_iter3;
reg    ap_enable_reg_pp5_iter4;
reg    ap_enable_reg_pp5_iter5;
reg    ap_enable_reg_pp5_iter6;
reg   [9:0] array_buffer_0_0_address0;
reg    array_buffer_0_0_ce0;
reg    array_buffer_0_0_we0;
reg   [31:0] array_buffer_0_0_d0;
wire   [31:0] array_buffer_0_0_q0;
reg    array_buffer_0_0_ce1;
wire   [31:0] array_buffer_0_0_q1;
reg   [9:0] array_buffer_0_1_address0;
reg    array_buffer_0_1_ce0;
reg    array_buffer_0_1_we0;
reg   [31:0] array_buffer_0_1_d0;
wire   [31:0] array_buffer_0_1_q0;
reg    array_buffer_0_1_ce1;
wire   [31:0] array_buffer_0_1_q1;
reg   [9:0] array_buffer_1_0_address0;
reg    array_buffer_1_0_ce0;
reg    array_buffer_1_0_we0;
wire   [31:0] array_buffer_1_0_q0;
reg    array_buffer_1_0_ce1;
reg    array_buffer_1_0_we1;
wire   [31:0] array_buffer_1_0_q1;
reg   [9:0] array_buffer_1_1_address0;
reg    array_buffer_1_1_ce0;
reg    array_buffer_1_1_we0;
wire   [31:0] array_buffer_1_1_q0;
reg    array_buffer_1_1_ce1;
reg    array_buffer_1_1_we1;
wire   [31:0] array_buffer_1_1_q1;
reg   [4:0] bondary_n_buffer_0_address0;
reg    bondary_n_buffer_0_ce0;
reg    bondary_n_buffer_0_we0;
wire   [31:0] bondary_n_buffer_0_q0;
reg   [4:0] bondary_n_buffer_1_address0;
reg    bondary_n_buffer_1_ce0;
reg    bondary_n_buffer_1_we0;
wire   [31:0] bondary_n_buffer_1_q0;
reg   [4:0] bondary_s_buffer_0_address0;
reg    bondary_s_buffer_0_ce0;
reg    bondary_s_buffer_0_we0;
wire   [31:0] bondary_s_buffer_0_q0;
reg   [4:0] bondary_s_buffer_1_address0;
reg    bondary_s_buffer_1_ce0;
reg    bondary_s_buffer_1_we0;
wire   [31:0] bondary_s_buffer_1_q0;
reg   [4:0] bondary_w_buffer_0_address0;
reg    bondary_w_buffer_0_ce0;
reg    bondary_w_buffer_0_we0;
wire   [31:0] bondary_w_buffer_0_q0;
reg    bondary_w_buffer_0_ce1;
wire   [31:0] bondary_w_buffer_0_q1;
reg   [4:0] bondary_w_buffer_1_address0;
reg    bondary_w_buffer_1_ce0;
reg    bondary_w_buffer_1_we0;
wire   [31:0] bondary_w_buffer_1_q0;
reg    bondary_w_buffer_1_ce1;
wire   [31:0] bondary_w_buffer_1_q1;
reg   [4:0] bondary_e_buffer_0_address0;
reg    bondary_e_buffer_0_ce0;
reg    bondary_e_buffer_0_we0;
wire   [31:0] bondary_e_buffer_0_q0;
reg    bondary_e_buffer_0_ce1;
wire   [31:0] bondary_e_buffer_0_q1;
reg   [4:0] bondary_e_buffer_1_address0;
reg    bondary_e_buffer_1_ce0;
reg    bondary_e_buffer_1_we0;
wire   [31:0] bondary_e_buffer_1_q0;
reg    bondary_e_buffer_1_ce1;
wire   [31:0] bondary_e_buffer_1_q1;
wire    grp_Kernel64x64_fu_610_ap_start;
wire    grp_Kernel64x64_fu_610_ap_idle;
wire   [9:0] grp_Kernel64x64_fu_610_array_buffer_0_0_address0;
wire    grp_Kernel64x64_fu_610_array_buffer_0_0_ce0;
wire    grp_Kernel64x64_fu_610_array_buffer_0_0_we0;
wire   [31:0] grp_Kernel64x64_fu_610_array_buffer_0_0_d0;
wire   [9:0] grp_Kernel64x64_fu_610_array_buffer_0_0_address1;
wire    grp_Kernel64x64_fu_610_array_buffer_0_0_ce1;
wire   [9:0] grp_Kernel64x64_fu_610_array_buffer_0_1_address0;
wire    grp_Kernel64x64_fu_610_array_buffer_0_1_ce0;
wire    grp_Kernel64x64_fu_610_array_buffer_0_1_we0;
wire   [31:0] grp_Kernel64x64_fu_610_array_buffer_0_1_d0;
wire   [9:0] grp_Kernel64x64_fu_610_array_buffer_0_1_address1;
wire    grp_Kernel64x64_fu_610_array_buffer_0_1_ce1;
wire   [9:0] grp_Kernel64x64_fu_610_array_buffer_1_0_address0;
wire    grp_Kernel64x64_fu_610_array_buffer_1_0_ce0;
wire   [9:0] grp_Kernel64x64_fu_610_array_buffer_1_0_address1;
wire    grp_Kernel64x64_fu_610_array_buffer_1_0_ce1;
wire    grp_Kernel64x64_fu_610_array_buffer_1_0_we1;
wire   [31:0] grp_Kernel64x64_fu_610_array_buffer_1_0_d1;
wire   [9:0] grp_Kernel64x64_fu_610_array_buffer_1_1_address0;
wire    grp_Kernel64x64_fu_610_array_buffer_1_1_ce0;
wire   [9:0] grp_Kernel64x64_fu_610_array_buffer_1_1_address1;
wire    grp_Kernel64x64_fu_610_array_buffer_1_1_ce1;
wire    grp_Kernel64x64_fu_610_array_buffer_1_1_we1;
wire   [31:0] grp_Kernel64x64_fu_610_array_buffer_1_1_d1;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_n_buffer_0_address0;
wire    grp_Kernel64x64_fu_610_bondary_n_buffer_0_ce0;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_n_buffer_1_address0;
wire    grp_Kernel64x64_fu_610_bondary_n_buffer_1_ce0;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_s_buffer_0_address0;
wire    grp_Kernel64x64_fu_610_bondary_s_buffer_0_ce0;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_s_buffer_1_address0;
wire    grp_Kernel64x64_fu_610_bondary_s_buffer_1_ce0;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_w_buffer_0_address0;
wire    grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce0;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_w_buffer_0_address1;
wire    grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce1;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_w_buffer_1_address0;
wire    grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce0;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_w_buffer_1_address1;
wire    grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce1;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_e_buffer_0_address0;
wire    grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce0;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_e_buffer_0_address1;
wire    grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce1;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_e_buffer_1_address0;
wire    grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce0;
wire   [4:0] grp_Kernel64x64_fu_610_bondary_e_buffer_1_address1;
wire    grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce1;
reg   [6:0] ap_phi_mux_i_0_phi_fu_515_p4;
reg   [6:0] ap_phi_mux_i5_0_phi_fu_592_p4;
reg    grp_Kernel64x64_fu_610_ap_start_reg;
wire    ap_CS_fsm_state52;
wire   [63:0] zext_ln38_5_fu_861_p1;
wire   [63:0] zext_ln45_fu_894_p1;
wire   [63:0] zext_ln51_fu_925_p1;
wire   [63:0] zext_ln57_fu_956_p1;
wire   [63:0] zext_ln63_fu_987_p1;
wire   [63:0] zext_ln83_6_fu_1113_p1;
wire   [63:0] empty_fu_640_p1;
wire   [63:0] empty_9_fu_660_p1;
wire   [63:0] empty_10_fu_680_p1;
wire   [63:0] empty_11_fu_700_p1;
wire   [63:0] zext_ln38_3_fu_851_p1;
wire   [63:0] zext_ln83_4_fu_1132_p1;
reg    ap_block_pp5_stage0_01001;
wire   [29:0] bondary_e9_fu_630_p4;
wire   [29:0] bondary_w7_fu_650_p4;
wire   [29:0] bondary_s5_fu_670_p4;
wire   [29:0] bondary_n3_fu_690_p4;
wire   [29:0] tmp_10_fu_710_p4;
wire   [0:0] icmp_ln35_fu_742_p2;
wire   [6:0] i_2_fu_736_p2;
wire   [12:0] tmp_6_fu_764_p3;
wire   [5:0] zext_ln38_2_mid2_v_fu_780_p4;
wire   [10:0] tmp_7_fu_790_p3;
wire   [6:0] select_ln38_fu_748_p3;
wire   [13:0] zext_ln38_fu_772_p1;
wire   [13:0] zext_ln38_1_fu_802_p1;
wire   [13:0] add_ln38_fu_806_p2;
wire   [30:0] zext_ln38_2_fu_812_p1;
wire   [5:0] tmp_11_fu_825_p4;
wire   [11:0] zext_ln36_fu_798_p1;
wire   [11:0] zext_ln38_4_fu_835_p1;
wire   [0:0] icmp_ln80_fu_1010_p2;
wire   [6:0] i_6_fu_1004_p2;
wire   [12:0] tmp_8_fu_1032_p3;
wire   [5:0] zext_ln83_2_mid2_v_fu_1048_p4;
wire   [10:0] tmp_9_fu_1058_p3;
wire   [6:0] select_ln83_3_fu_1016_p3;
wire   [13:0] zext_ln83_fu_1040_p1;
wire   [13:0] zext_ln83_2_fu_1070_p1;
wire   [13:0] add_ln83_fu_1074_p2;
wire   [30:0] zext_ln83_3_fu_1080_p1;
wire   [5:0] tmp_12_fu_1093_p4;
wire   [11:0] zext_ln83_1_fu_1066_p1;
wire   [11:0] zext_ln83_5_fu_1103_p1;
wire   [11:0] add_ln83_2_fu_1107_p2;
wire   [0:0] xor_ln83_fu_1127_p2;
wire   [0:0] and_ln83_fu_1142_p2;
wire   [0:0] xor_ln83_1_fu_1155_p2;
wire   [0:0] and_ln83_1_fu_1160_p2;
wire   [31:0] select_ln83_fu_1147_p3;
wire   [0:0] and_ln83_2_fu_1173_p2;
wire   [31:0] select_ln83_1_fu_1165_p3;
wire    ap_CS_fsm_state62;
reg   [37:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter5 = 1'b0;
#0 ap_enable_reg_pp5_iter6 = 1'b0;
#0 grp_Kernel64x64_fu_610_ap_start_reg = 1'b0;
end

wrapper_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
wrapper_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .initial_array(initial_array),
    .bondary_n(bondary_n),
    .bondary_s(bondary_s),
    .bondary_w(bondary_w),
    .bondary_e(bondary_e),
    .coef_tij(coef_tij),
    .coef_ti(coef_ti),
    .coef_tj(coef_tj),
    .iter(iter)
);

wrapper_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
wrapper_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(select_ln83_2_reg_1446),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

wrapper_array_bufhbi #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
array_buffer_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(array_buffer_0_0_address0),
    .ce0(array_buffer_0_0_ce0),
    .we0(array_buffer_0_0_we0),
    .d0(array_buffer_0_0_d0),
    .q0(array_buffer_0_0_q0),
    .address1(grp_Kernel64x64_fu_610_array_buffer_0_0_address1),
    .ce1(array_buffer_0_0_ce1),
    .q1(array_buffer_0_0_q1)
);

wrapper_array_bufhbi #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
array_buffer_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(array_buffer_0_1_address0),
    .ce0(array_buffer_0_1_ce0),
    .we0(array_buffer_0_1_we0),
    .d0(array_buffer_0_1_d0),
    .q0(array_buffer_0_1_q0),
    .address1(grp_Kernel64x64_fu_610_array_buffer_0_1_address1),
    .ce1(array_buffer_0_1_ce1),
    .q1(array_buffer_0_1_q1)
);

wrapper_array_bufjbC #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
array_buffer_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(array_buffer_1_0_address0),
    .ce0(array_buffer_1_0_ce0),
    .we0(array_buffer_1_0_we0),
    .d0(gmem_addr_4_read_reg_1278),
    .q0(array_buffer_1_0_q0),
    .address1(grp_Kernel64x64_fu_610_array_buffer_1_0_address1),
    .ce1(array_buffer_1_0_ce1),
    .we1(array_buffer_1_0_we1),
    .d1(grp_Kernel64x64_fu_610_array_buffer_1_0_d1),
    .q1(array_buffer_1_0_q1)
);

wrapper_array_bufjbC #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
array_buffer_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(array_buffer_1_1_address0),
    .ce0(array_buffer_1_1_ce0),
    .we0(array_buffer_1_1_we0),
    .d0(gmem_addr_4_read_reg_1278),
    .q0(array_buffer_1_1_q0),
    .address1(grp_Kernel64x64_fu_610_array_buffer_1_1_address1),
    .ce1(array_buffer_1_1_ce1),
    .we1(array_buffer_1_1_we1),
    .d1(grp_Kernel64x64_fu_610_array_buffer_1_1_d1),
    .q1(array_buffer_1_1_q1)
);

wrapper_bondary_nlbW #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bondary_n_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bondary_n_buffer_0_address0),
    .ce0(bondary_n_buffer_0_ce0),
    .we0(bondary_n_buffer_0_we0),
    .d0(gmem_addr_3_read_reg_1304),
    .q0(bondary_n_buffer_0_q0)
);

wrapper_bondary_nlbW #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bondary_n_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bondary_n_buffer_1_address0),
    .ce0(bondary_n_buffer_1_ce0),
    .we0(bondary_n_buffer_1_we0),
    .d0(gmem_addr_3_read_reg_1304),
    .q0(bondary_n_buffer_1_q0)
);

wrapper_bondary_nlbW #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bondary_s_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bondary_s_buffer_0_address0),
    .ce0(bondary_s_buffer_0_ce0),
    .we0(bondary_s_buffer_0_we0),
    .d0(gmem_addr_2_read_reg_1328),
    .q0(bondary_s_buffer_0_q0)
);

wrapper_bondary_nlbW #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bondary_s_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bondary_s_buffer_1_address0),
    .ce0(bondary_s_buffer_1_ce0),
    .we0(bondary_s_buffer_1_we0),
    .d0(gmem_addr_2_read_reg_1328),
    .q0(bondary_s_buffer_1_q0)
);

wrapper_bondary_wpcA #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bondary_w_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bondary_w_buffer_0_address0),
    .ce0(bondary_w_buffer_0_ce0),
    .we0(bondary_w_buffer_0_we0),
    .d0(gmem_addr_1_read_reg_1352),
    .q0(bondary_w_buffer_0_q0),
    .address1(grp_Kernel64x64_fu_610_bondary_w_buffer_0_address1),
    .ce1(bondary_w_buffer_0_ce1),
    .q1(bondary_w_buffer_0_q1)
);

wrapper_bondary_wpcA #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bondary_w_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bondary_w_buffer_1_address0),
    .ce0(bondary_w_buffer_1_ce0),
    .we0(bondary_w_buffer_1_we0),
    .d0(gmem_addr_1_read_reg_1352),
    .q0(bondary_w_buffer_1_q0),
    .address1(grp_Kernel64x64_fu_610_bondary_w_buffer_1_address1),
    .ce1(bondary_w_buffer_1_ce1),
    .q1(bondary_w_buffer_1_q1)
);

wrapper_bondary_wpcA #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bondary_e_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bondary_e_buffer_0_address0),
    .ce0(bondary_e_buffer_0_ce0),
    .we0(bondary_e_buffer_0_we0),
    .d0(gmem_addr_read_reg_1376),
    .q0(bondary_e_buffer_0_q0),
    .address1(grp_Kernel64x64_fu_610_bondary_e_buffer_0_address1),
    .ce1(bondary_e_buffer_0_ce1),
    .q1(bondary_e_buffer_0_q1)
);

wrapper_bondary_wpcA #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bondary_e_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bondary_e_buffer_1_address0),
    .ce0(bondary_e_buffer_1_ce0),
    .we0(bondary_e_buffer_1_we0),
    .d0(gmem_addr_read_reg_1376),
    .q0(bondary_e_buffer_1_q0),
    .address1(grp_Kernel64x64_fu_610_bondary_e_buffer_1_address1),
    .ce1(bondary_e_buffer_1_ce1),
    .q1(bondary_e_buffer_1_q1)
);

Kernel64x64 grp_Kernel64x64_fu_610(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Kernel64x64_fu_610_ap_start),
    .ap_done(grp_Kernel64x64_fu_610_ap_done),
    .ap_idle(grp_Kernel64x64_fu_610_ap_idle),
    .ap_ready(grp_Kernel64x64_fu_610_ap_ready),
    .array_buffer_0_0_address0(grp_Kernel64x64_fu_610_array_buffer_0_0_address0),
    .array_buffer_0_0_ce0(grp_Kernel64x64_fu_610_array_buffer_0_0_ce0),
    .array_buffer_0_0_we0(grp_Kernel64x64_fu_610_array_buffer_0_0_we0),
    .array_buffer_0_0_d0(grp_Kernel64x64_fu_610_array_buffer_0_0_d0),
    .array_buffer_0_0_q0(array_buffer_0_0_q0),
    .array_buffer_0_0_address1(grp_Kernel64x64_fu_610_array_buffer_0_0_address1),
    .array_buffer_0_0_ce1(grp_Kernel64x64_fu_610_array_buffer_0_0_ce1),
    .array_buffer_0_0_q1(array_buffer_0_0_q1),
    .array_buffer_0_1_address0(grp_Kernel64x64_fu_610_array_buffer_0_1_address0),
    .array_buffer_0_1_ce0(grp_Kernel64x64_fu_610_array_buffer_0_1_ce0),
    .array_buffer_0_1_we0(grp_Kernel64x64_fu_610_array_buffer_0_1_we0),
    .array_buffer_0_1_d0(grp_Kernel64x64_fu_610_array_buffer_0_1_d0),
    .array_buffer_0_1_q0(array_buffer_0_1_q0),
    .array_buffer_0_1_address1(grp_Kernel64x64_fu_610_array_buffer_0_1_address1),
    .array_buffer_0_1_ce1(grp_Kernel64x64_fu_610_array_buffer_0_1_ce1),
    .array_buffer_0_1_q1(array_buffer_0_1_q1),
    .array_buffer_1_0_address0(grp_Kernel64x64_fu_610_array_buffer_1_0_address0),
    .array_buffer_1_0_ce0(grp_Kernel64x64_fu_610_array_buffer_1_0_ce0),
    .array_buffer_1_0_q0(array_buffer_1_0_q0),
    .array_buffer_1_0_address1(grp_Kernel64x64_fu_610_array_buffer_1_0_address1),
    .array_buffer_1_0_ce1(grp_Kernel64x64_fu_610_array_buffer_1_0_ce1),
    .array_buffer_1_0_we1(grp_Kernel64x64_fu_610_array_buffer_1_0_we1),
    .array_buffer_1_0_d1(grp_Kernel64x64_fu_610_array_buffer_1_0_d1),
    .array_buffer_1_0_q1(array_buffer_1_0_q1),
    .array_buffer_1_1_address0(grp_Kernel64x64_fu_610_array_buffer_1_1_address0),
    .array_buffer_1_1_ce0(grp_Kernel64x64_fu_610_array_buffer_1_1_ce0),
    .array_buffer_1_1_q0(array_buffer_1_1_q0),
    .array_buffer_1_1_address1(grp_Kernel64x64_fu_610_array_buffer_1_1_address1),
    .array_buffer_1_1_ce1(grp_Kernel64x64_fu_610_array_buffer_1_1_ce1),
    .array_buffer_1_1_we1(grp_Kernel64x64_fu_610_array_buffer_1_1_we1),
    .array_buffer_1_1_d1(grp_Kernel64x64_fu_610_array_buffer_1_1_d1),
    .array_buffer_1_1_q1(array_buffer_1_1_q1),
    .bondary_n_buffer_0_address0(grp_Kernel64x64_fu_610_bondary_n_buffer_0_address0),
    .bondary_n_buffer_0_ce0(grp_Kernel64x64_fu_610_bondary_n_buffer_0_ce0),
    .bondary_n_buffer_0_q0(bondary_n_buffer_0_q0),
    .bondary_n_buffer_1_address0(grp_Kernel64x64_fu_610_bondary_n_buffer_1_address0),
    .bondary_n_buffer_1_ce0(grp_Kernel64x64_fu_610_bondary_n_buffer_1_ce0),
    .bondary_n_buffer_1_q0(bondary_n_buffer_1_q0),
    .bondary_s_buffer_0_address0(grp_Kernel64x64_fu_610_bondary_s_buffer_0_address0),
    .bondary_s_buffer_0_ce0(grp_Kernel64x64_fu_610_bondary_s_buffer_0_ce0),
    .bondary_s_buffer_0_q0(bondary_s_buffer_0_q0),
    .bondary_s_buffer_1_address0(grp_Kernel64x64_fu_610_bondary_s_buffer_1_address0),
    .bondary_s_buffer_1_ce0(grp_Kernel64x64_fu_610_bondary_s_buffer_1_ce0),
    .bondary_s_buffer_1_q0(bondary_s_buffer_1_q0),
    .bondary_w_buffer_0_address0(grp_Kernel64x64_fu_610_bondary_w_buffer_0_address0),
    .bondary_w_buffer_0_ce0(grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce0),
    .bondary_w_buffer_0_q0(bondary_w_buffer_0_q0),
    .bondary_w_buffer_0_address1(grp_Kernel64x64_fu_610_bondary_w_buffer_0_address1),
    .bondary_w_buffer_0_ce1(grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce1),
    .bondary_w_buffer_0_q1(bondary_w_buffer_0_q1),
    .bondary_w_buffer_1_address0(grp_Kernel64x64_fu_610_bondary_w_buffer_1_address0),
    .bondary_w_buffer_1_ce0(grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce0),
    .bondary_w_buffer_1_q0(bondary_w_buffer_1_q0),
    .bondary_w_buffer_1_address1(grp_Kernel64x64_fu_610_bondary_w_buffer_1_address1),
    .bondary_w_buffer_1_ce1(grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce1),
    .bondary_w_buffer_1_q1(bondary_w_buffer_1_q1),
    .bondary_e_buffer_0_address0(grp_Kernel64x64_fu_610_bondary_e_buffer_0_address0),
    .bondary_e_buffer_0_ce0(grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce0),
    .bondary_e_buffer_0_q0(bondary_e_buffer_0_q0),
    .bondary_e_buffer_0_address1(grp_Kernel64x64_fu_610_bondary_e_buffer_0_address1),
    .bondary_e_buffer_0_ce1(grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce1),
    .bondary_e_buffer_0_q1(bondary_e_buffer_0_q1),
    .bondary_e_buffer_1_address0(grp_Kernel64x64_fu_610_bondary_e_buffer_1_address0),
    .bondary_e_buffer_1_ce0(grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce0),
    .bondary_e_buffer_1_q0(bondary_e_buffer_1_q0),
    .bondary_e_buffer_1_address1(grp_Kernel64x64_fu_610_bondary_e_buffer_1_address1),
    .bondary_e_buffer_1_ce1(grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce1),
    .bondary_e_buffer_1_q1(bondary_e_buffer_1_q1),
    .coef_tij(coef_tij_read_reg_1200),
    .coef_ti(coef_ti_read_reg_1195),
    .coef_tj(coef_tj_read_reg_1190),
    .iter(iter_read_reg_1185)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state29)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state29);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state39) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state39)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state39);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state49) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state49)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state49);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state54) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((grp_Kernel64x64_fu_610_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state54)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state54);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
        end else if (((grp_Kernel64x64_fu_610_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
            ap_enable_reg_pp5_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Kernel64x64_fu_610_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state52)) begin
            grp_Kernel64x64_fu_610_ap_start_reg <= 1'b1;
        end else if ((grp_Kernel64x64_fu_610_ap_ready == 1'b1)) begin
            grp_Kernel64x64_fu_610_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i1_0_reg_533 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln42_fu_868_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_0_reg_533 <= i_fu_874_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i2_0_reg_544 <= 7'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln48_fu_899_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i2_0_reg_544 <= i_3_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        i3_0_reg_555 <= 7'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln54_fu_930_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i3_0_reg_555 <= i_4_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i4_0_reg_566 <= 7'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln60_fu_961_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i4_0_reg_566 <= i_7_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_reg_1382 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        i5_0_reg_588 <= select_ln83_4_reg_1391;
    end else if (((grp_Kernel64x64_fu_610_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
        i5_0_reg_588 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1235 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_511 <= select_ln38_1_reg_1244;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_511 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_fu_992_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        indvar_flatten6_reg_577 <= add_ln78_fu_998_p2;
    end else if (((grp_Kernel64x64_fu_610_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
        indvar_flatten6_reg_577 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_724_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_500 <= add_ln33_fu_730_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_500 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_fu_992_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        j6_0_reg_599 <= j_1_fu_1121_p2;
    end else if (((grp_Kernel64x64_fu_610_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
        j6_0_reg_599 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_724_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_522 <= j_fu_845_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_522 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln38_1_reg_1253 <= add_ln38_1_fu_816_p2;
        add_ln38_2_reg_1262 <= add_ln38_2_fu_839_p2;
        trunc_ln38_1_reg_1258 <= trunc_ln38_1_fu_821_p1;
        trunc_ln38_reg_1249 <= trunc_ln38_fu_776_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln38_2_reg_1262_pp0_iter1_reg <= add_ln38_2_reg_1262;
        icmp_ln33_reg_1235 <= icmp_ln33_fu_724_p2;
        icmp_ln33_reg_1235_pp0_iter1_reg <= icmp_ln33_reg_1235;
        trunc_ln38_1_reg_1258_pp0_iter1_reg <= trunc_ln38_1_reg_1258;
        trunc_ln38_reg_1249_pp0_iter1_reg <= trunc_ln38_reg_1249;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln38_2_reg_1262_pp0_iter2_reg <= add_ln38_2_reg_1262_pp0_iter1_reg;
        add_ln38_2_reg_1262_pp0_iter3_reg <= add_ln38_2_reg_1262_pp0_iter2_reg;
        add_ln38_2_reg_1262_pp0_iter4_reg <= add_ln38_2_reg_1262_pp0_iter3_reg;
        add_ln38_2_reg_1262_pp0_iter5_reg <= add_ln38_2_reg_1262_pp0_iter4_reg;
        add_ln38_2_reg_1262_pp0_iter6_reg <= add_ln38_2_reg_1262_pp0_iter5_reg;
        add_ln38_2_reg_1262_pp0_iter7_reg <= add_ln38_2_reg_1262_pp0_iter6_reg;
        add_ln38_2_reg_1262_pp0_iter8_reg <= add_ln38_2_reg_1262_pp0_iter7_reg;
        icmp_ln33_reg_1235_pp0_iter2_reg <= icmp_ln33_reg_1235_pp0_iter1_reg;
        icmp_ln33_reg_1235_pp0_iter3_reg <= icmp_ln33_reg_1235_pp0_iter2_reg;
        icmp_ln33_reg_1235_pp0_iter4_reg <= icmp_ln33_reg_1235_pp0_iter3_reg;
        icmp_ln33_reg_1235_pp0_iter5_reg <= icmp_ln33_reg_1235_pp0_iter4_reg;
        icmp_ln33_reg_1235_pp0_iter6_reg <= icmp_ln33_reg_1235_pp0_iter5_reg;
        icmp_ln33_reg_1235_pp0_iter7_reg <= icmp_ln33_reg_1235_pp0_iter6_reg;
        trunc_ln38_1_reg_1258_pp0_iter2_reg <= trunc_ln38_1_reg_1258_pp0_iter1_reg;
        trunc_ln38_1_reg_1258_pp0_iter3_reg <= trunc_ln38_1_reg_1258_pp0_iter2_reg;
        trunc_ln38_1_reg_1258_pp0_iter4_reg <= trunc_ln38_1_reg_1258_pp0_iter3_reg;
        trunc_ln38_1_reg_1258_pp0_iter5_reg <= trunc_ln38_1_reg_1258_pp0_iter4_reg;
        trunc_ln38_1_reg_1258_pp0_iter6_reg <= trunc_ln38_1_reg_1258_pp0_iter5_reg;
        trunc_ln38_1_reg_1258_pp0_iter7_reg <= trunc_ln38_1_reg_1258_pp0_iter6_reg;
        trunc_ln38_1_reg_1258_pp0_iter8_reg <= trunc_ln38_1_reg_1258_pp0_iter7_reg;
        trunc_ln38_reg_1249_pp0_iter2_reg <= trunc_ln38_reg_1249_pp0_iter1_reg;
        trunc_ln38_reg_1249_pp0_iter3_reg <= trunc_ln38_reg_1249_pp0_iter2_reg;
        trunc_ln38_reg_1249_pp0_iter4_reg <= trunc_ln38_reg_1249_pp0_iter3_reg;
        trunc_ln38_reg_1249_pp0_iter5_reg <= trunc_ln38_reg_1249_pp0_iter4_reg;
        trunc_ln38_reg_1249_pp0_iter6_reg <= trunc_ln38_reg_1249_pp0_iter5_reg;
        trunc_ln38_reg_1249_pp0_iter7_reg <= trunc_ln38_reg_1249_pp0_iter6_reg;
        trunc_ln38_reg_1249_pp0_iter8_reg <= trunc_ln38_reg_1249_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_fu_992_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        add_ln83_1_reg_1403 <= add_ln83_1_fu_1084_p2;
        trunc_ln83_1_reg_1408 <= trunc_ln83_1_fu_1089_p1;
        trunc_ln83_reg_1396 <= trunc_ln83_fu_1044_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        coef_ti_read_reg_1195 <= coef_ti;
        coef_tij_read_reg_1200 <= coef_tij;
        coef_tj_read_reg_1190 <= coef_tj;
        gmem_addr_1_reg_1211[29 : 0] <= empty_9_fu_660_p1[29 : 0];
        gmem_addr_2_reg_1217[29 : 0] <= empty_10_fu_680_p1[29 : 0];
        gmem_addr_3_reg_1223[29 : 0] <= empty_11_fu_700_p1[29 : 0];
        gmem_addr_reg_1205[29 : 0] <= empty_fu_640_p1[29 : 0];
        iter_read_reg_1185 <= iter;
        p_cast_reg_1229[29 : 0] <= p_cast_fu_720_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        gmem_addr_1_read_reg_1352 <= gmem_RDATA;
        lshr_ln2_reg_1347_pp3_iter1_reg <= lshr_ln2_reg_1347;
        trunc_ln57_reg_1343_pp3_iter1_reg <= trunc_ln57_reg_1343;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gmem_addr_2_read_reg_1328 <= gmem_RDATA;
        lshr_ln1_reg_1323_pp2_iter1_reg <= lshr_ln1_reg_1323;
        trunc_ln51_reg_1319_pp2_iter1_reg <= trunc_ln51_reg_1319;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem_addr_3_read_reg_1304 <= gmem_RDATA;
        lshr_ln_reg_1299_pp1_iter1_reg <= lshr_ln_reg_1299;
        trunc_ln45_reg_1295_pp1_iter1_reg <= trunc_ln45_reg_1295;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1235_pp0_iter7_reg == 1'd0))) begin
        gmem_addr_4_read_reg_1278 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        gmem_addr_read_reg_1376 <= gmem_RDATA;
        lshr_ln3_reg_1371_pp4_iter1_reg <= lshr_ln3_reg_1371;
        trunc_ln63_reg_1367_pp4_iter1_reg <= trunc_ln63_reg_1367;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln78_reg_1382 <= icmp_ln78_fu_992_p2;
        icmp_ln78_reg_1382_pp5_iter1_reg <= icmp_ln78_reg_1382;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        icmp_ln78_reg_1382_pp5_iter2_reg <= icmp_ln78_reg_1382_pp5_iter1_reg;
        icmp_ln78_reg_1382_pp5_iter3_reg <= icmp_ln78_reg_1382_pp5_iter2_reg;
        icmp_ln78_reg_1382_pp5_iter4_reg <= icmp_ln78_reg_1382_pp5_iter3_reg;
        icmp_ln78_reg_1382_pp5_iter5_reg <= icmp_ln78_reg_1382_pp5_iter4_reg;
        icmp_ln78_reg_1382_pp5_iter6_reg <= icmp_ln78_reg_1382_pp5_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln48_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        lshr_ln1_reg_1323 <= {{i2_0_reg_544[6:1]}};
        trunc_ln51_reg_1319 <= trunc_ln51_fu_911_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln54_fu_930_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        lshr_ln2_reg_1347 <= {{i3_0_reg_555[6:1]}};
        trunc_ln57_reg_1343 <= trunc_ln57_fu_942_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln60_fu_961_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        lshr_ln3_reg_1371 <= {{i4_0_reg_566[6:1]}};
        trunc_ln63_reg_1367 <= trunc_ln63_fu_973_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln42_fu_868_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        lshr_ln_reg_1299 <= {{i1_0_reg_533[6:1]}};
        trunc_ln45_reg_1295 <= trunc_ln45_fu_880_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_724_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln38_1_reg_1244 <= select_ln38_1_fu_756_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_reg_1382 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        select_ln83_2_reg_1446 <= select_ln83_2_fu_1177_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_fu_992_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        select_ln83_4_reg_1391 <= select_ln83_4_fu_1024_p3;
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_724_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_868_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_899_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_930_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state39 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state39 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_961_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state49 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state49 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln78_fu_992_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state54 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state54 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter5 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (icmp_ln78_reg_1382 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        ap_phi_mux_i5_0_phi_fu_592_p4 = select_ln83_4_reg_1391;
    end else begin
        ap_phi_mux_i5_0_phi_fu_592_p4 = i5_0_reg_588;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_1235 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_515_p4 = select_ln38_1_reg_1244;
    end else begin
        ap_phi_mux_i_0_phi_fu_515_p4 = i_0_reg_511;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        array_buffer_0_0_address0 = zext_ln83_6_fu_1113_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_0_0_address0 = zext_ln38_5_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_0_address0 = grp_Kernel64x64_fu_610_array_buffer_0_0_address0;
    end else begin
        array_buffer_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        array_buffer_0_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_0_ce0 = grp_Kernel64x64_fu_610_array_buffer_0_0_ce0;
    end else begin
        array_buffer_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_0_ce1 = grp_Kernel64x64_fu_610_array_buffer_0_0_ce1;
    end else begin
        array_buffer_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_0_0_d0 = gmem_addr_4_read_reg_1278;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_0_d0 = grp_Kernel64x64_fu_610_array_buffer_0_0_d0;
    end else begin
        array_buffer_0_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln38_1_reg_1258_pp0_iter8_reg == 1'd0) & (trunc_ln38_reg_1249_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_0_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_0_we0 = grp_Kernel64x64_fu_610_array_buffer_0_0_we0;
    end else begin
        array_buffer_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        array_buffer_0_1_address0 = zext_ln83_6_fu_1113_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_0_1_address0 = zext_ln38_5_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_1_address0 = grp_Kernel64x64_fu_610_array_buffer_0_1_address0;
    end else begin
        array_buffer_0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        array_buffer_0_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_1_ce0 = grp_Kernel64x64_fu_610_array_buffer_0_1_ce0;
    end else begin
        array_buffer_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_1_ce1 = grp_Kernel64x64_fu_610_array_buffer_0_1_ce1;
    end else begin
        array_buffer_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_0_1_d0 = gmem_addr_4_read_reg_1278;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_1_d0 = grp_Kernel64x64_fu_610_array_buffer_0_1_d0;
    end else begin
        array_buffer_0_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((trunc_ln38_1_reg_1258_pp0_iter8_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln38_reg_1249_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_0_1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_0_1_we0 = grp_Kernel64x64_fu_610_array_buffer_0_1_we0;
    end else begin
        array_buffer_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        array_buffer_1_0_address0 = zext_ln83_6_fu_1113_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_1_0_address0 = zext_ln38_5_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_1_0_address0 = grp_Kernel64x64_fu_610_array_buffer_1_0_address0;
    end else begin
        array_buffer_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        array_buffer_1_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_1_0_ce0 = grp_Kernel64x64_fu_610_array_buffer_1_0_ce0;
    end else begin
        array_buffer_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_1_0_ce1 = grp_Kernel64x64_fu_610_array_buffer_1_0_ce1;
    end else begin
        array_buffer_1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln38_reg_1249_pp0_iter8_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln38_1_reg_1258_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_1_0_we0 = 1'b1;
    end else begin
        array_buffer_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_1_0_we1 = grp_Kernel64x64_fu_610_array_buffer_1_0_we1;
    end else begin
        array_buffer_1_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        array_buffer_1_1_address0 = zext_ln83_6_fu_1113_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_1_1_address0 = zext_ln38_5_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_1_1_address0 = grp_Kernel64x64_fu_610_array_buffer_1_1_address0;
    end else begin
        array_buffer_1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        array_buffer_1_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_1_1_ce0 = grp_Kernel64x64_fu_610_array_buffer_1_1_ce0;
    end else begin
        array_buffer_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_1_1_ce1 = grp_Kernel64x64_fu_610_array_buffer_1_1_ce1;
    end else begin
        array_buffer_1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln38_1_reg_1258_pp0_iter8_reg == 1'd1) & (trunc_ln38_reg_1249_pp0_iter8_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        array_buffer_1_1_we0 = 1'b1;
    end else begin
        array_buffer_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        array_buffer_1_1_we1 = grp_Kernel64x64_fu_610_array_buffer_1_1_we1;
    end else begin
        array_buffer_1_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        bondary_e_buffer_0_address0 = zext_ln63_fu_987_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_e_buffer_0_address0 = grp_Kernel64x64_fu_610_bondary_e_buffer_0_address0;
    end else begin
        bondary_e_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        bondary_e_buffer_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_e_buffer_0_ce0 = grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce0;
    end else begin
        bondary_e_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_e_buffer_0_ce1 = grp_Kernel64x64_fu_610_bondary_e_buffer_0_ce1;
    end else begin
        bondary_e_buffer_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (trunc_ln63_reg_1367_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        bondary_e_buffer_0_we0 = 1'b1;
    end else begin
        bondary_e_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        bondary_e_buffer_1_address0 = zext_ln63_fu_987_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_e_buffer_1_address0 = grp_Kernel64x64_fu_610_bondary_e_buffer_1_address0;
    end else begin
        bondary_e_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        bondary_e_buffer_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_e_buffer_1_ce0 = grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce0;
    end else begin
        bondary_e_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_e_buffer_1_ce1 = grp_Kernel64x64_fu_610_bondary_e_buffer_1_ce1;
    end else begin
        bondary_e_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln63_reg_1367_pp4_iter1_reg == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        bondary_e_buffer_1_we0 = 1'b1;
    end else begin
        bondary_e_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bondary_n_buffer_0_address0 = zext_ln45_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_n_buffer_0_address0 = grp_Kernel64x64_fu_610_bondary_n_buffer_0_address0;
    end else begin
        bondary_n_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bondary_n_buffer_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_n_buffer_0_ce0 = grp_Kernel64x64_fu_610_bondary_n_buffer_0_ce0;
    end else begin
        bondary_n_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (trunc_ln45_reg_1295_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bondary_n_buffer_0_we0 = 1'b1;
    end else begin
        bondary_n_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bondary_n_buffer_1_address0 = zext_ln45_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_n_buffer_1_address0 = grp_Kernel64x64_fu_610_bondary_n_buffer_1_address0;
    end else begin
        bondary_n_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bondary_n_buffer_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_n_buffer_1_ce0 = grp_Kernel64x64_fu_610_bondary_n_buffer_1_ce0;
    end else begin
        bondary_n_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln45_reg_1295_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bondary_n_buffer_1_we0 = 1'b1;
    end else begin
        bondary_n_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        bondary_s_buffer_0_address0 = zext_ln51_fu_925_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_s_buffer_0_address0 = grp_Kernel64x64_fu_610_bondary_s_buffer_0_address0;
    end else begin
        bondary_s_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bondary_s_buffer_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_s_buffer_0_ce0 = grp_Kernel64x64_fu_610_bondary_s_buffer_0_ce0;
    end else begin
        bondary_s_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (trunc_ln51_reg_1319_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bondary_s_buffer_0_we0 = 1'b1;
    end else begin
        bondary_s_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        bondary_s_buffer_1_address0 = zext_ln51_fu_925_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_s_buffer_1_address0 = grp_Kernel64x64_fu_610_bondary_s_buffer_1_address0;
    end else begin
        bondary_s_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bondary_s_buffer_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_s_buffer_1_ce0 = grp_Kernel64x64_fu_610_bondary_s_buffer_1_ce0;
    end else begin
        bondary_s_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln51_reg_1319_pp2_iter1_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bondary_s_buffer_1_we0 = 1'b1;
    end else begin
        bondary_s_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        bondary_w_buffer_0_address0 = zext_ln57_fu_956_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_w_buffer_0_address0 = grp_Kernel64x64_fu_610_bondary_w_buffer_0_address0;
    end else begin
        bondary_w_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        bondary_w_buffer_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_w_buffer_0_ce0 = grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce0;
    end else begin
        bondary_w_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_w_buffer_0_ce1 = grp_Kernel64x64_fu_610_bondary_w_buffer_0_ce1;
    end else begin
        bondary_w_buffer_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (trunc_ln57_reg_1343_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        bondary_w_buffer_0_we0 = 1'b1;
    end else begin
        bondary_w_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        bondary_w_buffer_1_address0 = zext_ln57_fu_956_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_w_buffer_1_address0 = grp_Kernel64x64_fu_610_bondary_w_buffer_1_address0;
    end else begin
        bondary_w_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        bondary_w_buffer_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_w_buffer_1_ce0 = grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce0;
    end else begin
        bondary_w_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        bondary_w_buffer_1_ce1 = grp_Kernel64x64_fu_610_bondary_w_buffer_1_ce1;
    end else begin
        bondary_w_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln57_reg_1343_pp3_iter1_reg == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        bondary_w_buffer_1_we0 = 1'b1;
    end else begin
        bondary_w_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        gmem_ARADDR = gmem_addr_reg_1205;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        gmem_ARADDR = gmem_addr_1_reg_1211;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem_ARADDR = gmem_addr_2_reg_1217;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_ARADDR = gmem_addr_3_reg_1223;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1235 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_ARADDR = zext_ln38_3_fu_851_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)))) begin
        gmem_ARLEN = 32'd64;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1235 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_ARLEN = 32'd1;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1235 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_reg_1382 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_reg_1382_pp5_iter6_reg == 1'd0) & (ap_enable_reg_pp5_iter7 == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1235_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln78_reg_1382_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state42) | ((icmp_ln33_reg_1235 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (icmp_ln78_reg_1382 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (icmp_ln78_reg_1382_pp5_iter6_reg == 1'd0) & (ap_enable_reg_pp5_iter7 == 1'b1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln33_reg_1235_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (icmp_ln78_reg_1382_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln33_fu_724_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln33_fu_724_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln42_fu_868_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln42_fu_868_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln48_fu_899_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln48_fu_899_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln54_fu_930_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln54_fu_930_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln60_fu_961_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln60_fu_961_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((grp_Kernel64x64_fu_610_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln78_fu_992_p2 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((ap_enable_reg_pp5_iter6 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln78_fu_992_p2 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1)) | ((ap_enable_reg_pp5_iter6 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_730_p2 = (indvar_flatten_reg_500 + 13'd1);

assign add_ln38_1_fu_816_p2 = (p_cast_reg_1229 + zext_ln38_2_fu_812_p1);

assign add_ln38_2_fu_839_p2 = (zext_ln36_fu_798_p1 + zext_ln38_4_fu_835_p1);

assign add_ln38_fu_806_p2 = (zext_ln38_fu_772_p1 + zext_ln38_1_fu_802_p1);

assign add_ln78_fu_998_p2 = (indvar_flatten6_reg_577 + 13'd1);

assign add_ln83_1_fu_1084_p2 = (p_cast_reg_1229 + zext_ln83_3_fu_1080_p1);

assign add_ln83_2_fu_1107_p2 = (zext_ln83_1_fu_1066_p1 + zext_ln83_5_fu_1103_p1);

assign add_ln83_fu_1074_p2 = (zext_ln83_fu_1040_p1 + zext_ln83_2_fu_1070_p1);

assign and_ln83_1_fu_1160_p2 = (xor_ln83_1_fu_1155_p2 & trunc_ln83_reg_1396);

assign and_ln83_2_fu_1173_p2 = (trunc_ln83_reg_1396 & trunc_ln83_1_reg_1408);

assign and_ln83_fu_1142_p2 = (xor_ln83_fu_1127_p2 & trunc_ln83_1_reg_1408);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd37];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_RVALID == 1'b0) & (icmp_ln33_reg_1235_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_RVALID == 1'b0) & (icmp_ln33_reg_1235_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_01001 = ((gmem_BVALID == 1'b0) & (icmp_ln78_reg_1382_pp5_iter6_reg == 1'd0) & (ap_enable_reg_pp5_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_11001 = (((gmem_BVALID == 1'b0) & (icmp_ln78_reg_1382_pp5_iter6_reg == 1'd0) & (ap_enable_reg_pp5_iter7 == 1'b1)) | ((1'b1 == ap_block_state56_io) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b1 == ap_block_state55_io) & (ap_enable_reg_pp5_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = (((gmem_BVALID == 1'b0) & (icmp_ln78_reg_1382_pp5_iter6_reg == 1'd0) & (ap_enable_reg_pp5_iter7 == 1'b1)) | ((1'b1 == ap_block_state56_io) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b1 == ap_block_state55_io) & (ap_enable_reg_pp5_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((gmem_RVALID == 1'b0) & (icmp_ln33_reg_1235_pp0_iter7_reg == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = (gmem_RVALID == 1'b0);
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_pp2_stage0_iter1 = (gmem_RVALID == 1'b0);
end

assign ap_block_state31_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((gmem_ARREADY == 1'b0) & (icmp_ln33_reg_1235 == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_pp3_stage0_iter1 = (gmem_RVALID == 1'b0);
end

assign ap_block_state41_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state50_pp4_stage0_iter1 = (gmem_RVALID == 1'b0);
end

assign ap_block_state51_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state55_io = ((gmem_AWREADY == 1'b0) & (icmp_ln78_reg_1382 == 1'd0));
end

assign ap_block_state55_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state56_io = ((gmem_WREADY == 1'b0) & (icmp_ln78_reg_1382_pp5_iter1_reg == 1'd0));
end

assign ap_block_state56_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp5_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp5_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp5_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state61_pp5_stage0_iter7 = ((gmem_BVALID == 1'b0) & (icmp_ln78_reg_1382_pp5_iter6_reg == 1'd0));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bondary_e9_fu_630_p4 = {{bondary_e[31:2]}};

assign bondary_n3_fu_690_p4 = {{bondary_n[31:2]}};

assign bondary_s5_fu_670_p4 = {{bondary_s[31:2]}};

assign bondary_w7_fu_650_p4 = {{bondary_w[31:2]}};

assign empty_10_fu_680_p1 = bondary_s5_fu_670_p4;

assign empty_11_fu_700_p1 = bondary_n3_fu_690_p4;

assign empty_9_fu_660_p1 = bondary_w7_fu_650_p4;

assign empty_fu_640_p1 = bondary_e9_fu_630_p4;

assign gmem_AWADDR = zext_ln83_4_fu_1132_p1;

assign grp_Kernel64x64_fu_610_ap_start = grp_Kernel64x64_fu_610_ap_start_reg;

assign i_2_fu_736_p2 = (7'd1 + ap_phi_mux_i_0_phi_fu_515_p4);

assign i_3_fu_905_p2 = (i2_0_reg_544 + 7'd1);

assign i_4_fu_936_p2 = (i3_0_reg_555 + 7'd1);

assign i_6_fu_1004_p2 = (7'd1 + ap_phi_mux_i5_0_phi_fu_592_p4);

assign i_7_fu_967_p2 = (i4_0_reg_566 + 7'd1);

assign i_fu_874_p2 = (i1_0_reg_533 + 7'd1);

assign icmp_ln33_fu_724_p2 = ((indvar_flatten_reg_500 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_742_p2 = ((j_0_reg_522 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_868_p2 = ((i1_0_reg_533 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_899_p2 = ((i2_0_reg_544 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_930_p2 = ((i3_0_reg_555 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_961_p2 = ((i4_0_reg_566 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_992_p2 = ((indvar_flatten6_reg_577 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1010_p2 = ((j6_0_reg_599 == 7'd64) ? 1'b1 : 1'b0);

assign j_1_fu_1121_p2 = (7'd1 + select_ln83_3_fu_1016_p3);

assign j_fu_845_p2 = (select_ln38_fu_748_p3 + 7'd1);

assign p_cast_fu_720_p1 = tmp_10_fu_710_p4;

assign select_ln38_1_fu_756_p3 = ((icmp_ln35_fu_742_p2[0:0] === 1'b1) ? i_2_fu_736_p2 : ap_phi_mux_i_0_phi_fu_515_p4);

assign select_ln38_fu_748_p3 = ((icmp_ln35_fu_742_p2[0:0] === 1'b1) ? 7'd0 : j_0_reg_522);

assign select_ln83_1_fu_1165_p3 = ((and_ln83_1_fu_1160_p2[0:0] === 1'b1) ? array_buffer_1_0_q0 : select_ln83_fu_1147_p3);

assign select_ln83_2_fu_1177_p3 = ((and_ln83_2_fu_1173_p2[0:0] === 1'b1) ? array_buffer_1_1_q0 : select_ln83_1_fu_1165_p3);

assign select_ln83_3_fu_1016_p3 = ((icmp_ln80_fu_1010_p2[0:0] === 1'b1) ? 7'd0 : j6_0_reg_599);

assign select_ln83_4_fu_1024_p3 = ((icmp_ln80_fu_1010_p2[0:0] === 1'b1) ? i_6_fu_1004_p2 : ap_phi_mux_i5_0_phi_fu_592_p4);

assign select_ln83_fu_1147_p3 = ((and_ln83_fu_1142_p2[0:0] === 1'b1) ? array_buffer_0_1_q0 : array_buffer_0_0_q0);

assign tmp_10_fu_710_p4 = {{initial_array[31:2]}};

assign tmp_11_fu_825_p4 = {{select_ln38_fu_748_p3[6:1]}};

assign tmp_12_fu_1093_p4 = {{select_ln83_3_fu_1016_p3[6:1]}};

assign tmp_6_fu_764_p3 = {{select_ln38_1_fu_756_p3}, {6'd0}};

assign tmp_7_fu_790_p3 = {{zext_ln38_2_mid2_v_fu_780_p4}, {5'd0}};

assign tmp_8_fu_1032_p3 = {{select_ln83_4_fu_1024_p3}, {6'd0}};

assign tmp_9_fu_1058_p3 = {{zext_ln83_2_mid2_v_fu_1048_p4}, {5'd0}};

assign trunc_ln38_1_fu_821_p1 = select_ln38_fu_748_p3[0:0];

assign trunc_ln38_fu_776_p1 = select_ln38_1_fu_756_p3[0:0];

assign trunc_ln45_fu_880_p1 = i1_0_reg_533[0:0];

assign trunc_ln51_fu_911_p1 = i2_0_reg_544[0:0];

assign trunc_ln57_fu_942_p1 = i3_0_reg_555[0:0];

assign trunc_ln63_fu_973_p1 = i4_0_reg_566[0:0];

assign trunc_ln83_1_fu_1089_p1 = select_ln83_3_fu_1016_p3[0:0];

assign trunc_ln83_fu_1044_p1 = select_ln83_4_fu_1024_p3[0:0];

assign xor_ln83_1_fu_1155_p2 = (trunc_ln83_1_reg_1408 ^ 1'd1);

assign xor_ln83_fu_1127_p2 = (trunc_ln83_reg_1396 ^ 1'd1);

assign zext_ln36_fu_798_p1 = tmp_7_fu_790_p3;

assign zext_ln38_1_fu_802_p1 = select_ln38_fu_748_p3;

assign zext_ln38_2_fu_812_p1 = add_ln38_fu_806_p2;

assign zext_ln38_2_mid2_v_fu_780_p4 = {{select_ln38_1_fu_756_p3[6:1]}};

assign zext_ln38_3_fu_851_p1 = add_ln38_1_reg_1253;

assign zext_ln38_4_fu_835_p1 = tmp_11_fu_825_p4;

assign zext_ln38_5_fu_861_p1 = add_ln38_2_reg_1262_pp0_iter8_reg;

assign zext_ln38_fu_772_p1 = tmp_6_fu_764_p3;

assign zext_ln45_fu_894_p1 = lshr_ln_reg_1299_pp1_iter1_reg;

assign zext_ln51_fu_925_p1 = lshr_ln1_reg_1323_pp2_iter1_reg;

assign zext_ln57_fu_956_p1 = lshr_ln2_reg_1347_pp3_iter1_reg;

assign zext_ln63_fu_987_p1 = lshr_ln3_reg_1371_pp4_iter1_reg;

assign zext_ln83_1_fu_1066_p1 = tmp_9_fu_1058_p3;

assign zext_ln83_2_fu_1070_p1 = select_ln83_3_fu_1016_p3;

assign zext_ln83_2_mid2_v_fu_1048_p4 = {{select_ln83_4_fu_1024_p3[6:1]}};

assign zext_ln83_3_fu_1080_p1 = add_ln83_fu_1074_p2;

assign zext_ln83_4_fu_1132_p1 = add_ln83_1_reg_1403;

assign zext_ln83_5_fu_1103_p1 = tmp_12_fu_1093_p4;

assign zext_ln83_6_fu_1113_p1 = add_ln83_2_fu_1107_p2;

assign zext_ln83_fu_1040_p1 = tmp_8_fu_1032_p3;

always @ (posedge ap_clk) begin
    gmem_addr_reg_1205[31:30] <= 2'b00;
    gmem_addr_1_reg_1211[31:30] <= 2'b00;
    gmem_addr_2_reg_1217[31:30] <= 2'b00;
    gmem_addr_3_reg_1223[31:30] <= 2'b00;
    p_cast_reg_1229[30] <= 1'b0;
end

endmodule //wrapper
